{"version":3,"file":"static/js/876.e155dd6b.chunk.js","mappings":"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","sources":["../../common/temp/node_modules/.pnpm/@fluentui+react-hooks@8.3.9_b08e3c15324cbe90a6ff8fcd416c932c/node_modules/@fluentui/react-hooks/src/useBoolean.ts","../../common/temp/node_modules/.pnpm/@fluentui+react@8.49.6_3b0f326be7f6581d99777332216eb178/node_modules/@fluentui/react/lib/components/src/components/Modal/Modal.styles.ts","../../common/temp/node_modules/.pnpm/@fluentui+react@8.49.6_3b0f326be7f6581d99777332216eb178/node_modules/@fluentui/react/lib/utilities/src/utilities/DraggableZone/DraggableZone.styles.ts","../../common/temp/node_modules/.pnpm/@fluentui+react@8.49.6_3b0f326be7f6581d99777332216eb178/node_modules/@fluentui/react/lib/utilities/src/utilities/DraggableZone/DraggableZone.tsx","../../common/temp/node_modules/.pnpm/@fluentui+react@8.49.6_3b0f326be7f6581d99777332216eb178/node_modules/@fluentui/react/lib/components/src/components/Modal/Modal.base.tsx","../../common/temp/node_modules/.pnpm/@fluentui+react-hooks@8.3.9_b08e3c15324cbe90a6ff8fcd416c932c/node_modules/@fluentui/react-hooks/src/useUnmount.ts","../../common/temp/node_modules/.pnpm/@fluentui+react@8.49.6_3b0f326be7f6581d99777332216eb178/node_modules/@fluentui/react/lib/components/src/components/Modal/Modal.ts","../../common/temp/node_modules/.pnpm/@fluentui+react@8.49.6_3b0f326be7f6581d99777332216eb178/node_modules/@fluentui/react/lib/components/src/components/Dialog/DialogContent.base.tsx","../../common/temp/node_modules/.pnpm/@fluentui+react@8.49.6_3b0f326be7f6581d99777332216eb178/node_modules/@fluentui/react/lib/components/src/components/Dialog/DialogContent.styles.ts","../../common/temp/node_modules/.pnpm/@fluentui+react@8.49.6_3b0f326be7f6581d99777332216eb178/node_modules/@fluentui/react/lib/components/src/components/Dialog/DialogContent.tsx","../../common/temp/node_modules/.pnpm/@fluentui+react@8.49.6_3b0f326be7f6581d99777332216eb178/node_modules/@fluentui/react/lib/components/src/components/Dialog/Dialog.base.tsx","../../common/temp/node_modules/.pnpm/@fluentui+react@8.49.6_3b0f326be7f6581d99777332216eb178/node_modules/@fluentui/react/lib/components/src/components/Dialog/Dialog.styles.ts","../../common/temp/node_modules/.pnpm/@fluentui+react@8.49.6_3b0f326be7f6581d99777332216eb178/node_modules/@fluentui/react/lib/components/src/components/Dialog/Dialog.tsx","../../common/temp/node_modules/.pnpm/@fluentui+react@8.49.6_3b0f326be7f6581d99777332216eb178/node_modules/@fluentui/react/lib/components/src/components/Dialog/DialogContent.types.ts","../../common/temp/node_modules/.pnpm/@fluentui+react@8.49.6_3b0f326be7f6581d99777332216eb178/node_modules/@fluentui/react/lib/components/src/components/Dialog/DialogFooter.base.tsx","../../common/temp/node_modules/.pnpm/@fluentui+react@8.49.6_3b0f326be7f6581d99777332216eb178/node_modules/@fluentui/react/lib/components/src/components/Dialog/DialogFooter.styles.ts","../../common/temp/node_modules/.pnpm/@fluentui+react@8.49.6_3b0f326be7f6581d99777332216eb178/node_modules/@fluentui/react/lib/components/src/components/Dialog/DialogFooter.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useConst } from './useConst';\n\n/** Updater callbacks returned by `useBoolean`. */\nexport interface IUseBooleanCallbacks {\n  /** Set the value to true. Always has the same identity. */\n  setTrue: () => void;\n  /** Set the value to false. Always has the same identity. */\n  setFalse: () => void;\n  /** Toggle the value. Always has the same identity. */\n  toggle: () => void;\n}\n\n/**\n * Hook to store a value and generate callbacks for setting the value to true or false.\n * The identity of the callbacks will always stay the same.\n *\n * @param initialState - Initial value\n * @returns Array with the current value and an object containing the updater callbacks.\n */\nexport function useBoolean(initialState: boolean): [boolean, IUseBooleanCallbacks] {\n  const [value, setValue] = React.useState(initialState);\n\n  const setTrue = useConst(() => () => {\n    setValue(true);\n  });\n  const setFalse = useConst(() => () => {\n    setValue(false);\n  });\n  const toggle = useConst(() => () => {\n    setValue(currentValue => !currentValue);\n  });\n\n  return [value, { setTrue, setFalse, toggle }];\n}\n","import { AnimationVariables, getGlobalClassNames, ZIndexes } from '../../Styling';\nimport type { IModalStyleProps, IModalStyles } from './Modal.types';\n\nexport const animationDuration = AnimationVariables.durationValue2;\n\nconst globalClassNames = {\n  root: 'ms-Modal',\n  main: 'ms-Dialog-main',\n  scrollableContent: 'ms-Modal-scrollableContent',\n  isOpen: 'is-open',\n  layer: 'ms-Modal-Layer',\n};\n\nexport const getStyles = (props: IModalStyleProps): IModalStyles => {\n  const {\n    className,\n    containerClassName,\n    scrollableContentClassName,\n    isOpen,\n    isVisible,\n    hasBeenOpened,\n    modalRectangleTop,\n    theme,\n    topOffsetFixed,\n    isModeless,\n    layerClassName,\n    isDefaultDragHandle,\n    windowInnerHeight,\n  } = props;\n  const { palette, effects, fonts } = theme;\n\n  const classNames = getGlobalClassNames(globalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      {\n        backgroundColor: 'transparent',\n        position: isModeless ? 'absolute' : 'fixed',\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        opacity: 0,\n        pointerEvents: 'none',\n        transition: `opacity ${animationDuration}`,\n      },\n      topOffsetFixed &&\n        typeof modalRectangleTop === 'number' &&\n        hasBeenOpened && {\n          alignItems: 'flex-start',\n        },\n      isOpen && classNames.isOpen,\n      isVisible && {\n        opacity: 1,\n        pointerEvents: 'auto',\n      },\n      className,\n    ],\n    main: [\n      classNames.main,\n      {\n        boxShadow: effects.elevation64,\n        borderRadius: effects.roundedCorner2,\n        backgroundColor: palette.white,\n        boxSizing: 'border-box',\n        position: 'relative',\n        textAlign: 'left',\n        outline: '3px solid transparent',\n        maxHeight: 'calc(100% - 32px)',\n        maxWidth: 'calc(100% - 32px)',\n        minHeight: '176px',\n        minWidth: '288px',\n        overflowY: 'auto',\n        zIndex: isModeless ? ZIndexes.Layer : undefined,\n      },\n      topOffsetFixed &&\n        typeof modalRectangleTop === 'number' &&\n        hasBeenOpened && {\n          top: modalRectangleTop,\n        },\n      isDefaultDragHandle && {\n        cursor: 'move',\n      },\n      containerClassName,\n    ],\n    scrollableContent: [\n      classNames.scrollableContent,\n      {\n        overflowY: 'auto',\n        flexGrow: 1,\n        maxHeight: '100vh',\n        selectors: {\n          ['@supports (-webkit-overflow-scrolling: touch)']: {\n            maxHeight: windowInnerHeight,\n          },\n        },\n      },\n      scrollableContentClassName,\n    ],\n    layer: isModeless && [\n      layerClassName,\n      classNames.layer,\n      {\n        position: 'static',\n        width: 'unset',\n        height: 'unset',\n      },\n    ],\n    keyboardMoveIconContainer: {\n      position: 'absolute',\n      display: 'flex',\n      justifyContent: 'center',\n      width: '100%',\n      padding: '3px 0px',\n    },\n    keyboardMoveIcon: {\n      // eslint-disable-next-line deprecation/deprecation\n      fontSize: fonts.xLargePlus.fontSize,\n      width: '24px',\n    },\n  };\n};\n","import { memoizeFunction } from '../../Utilities';\nimport { mergeStyles } from '../../Styling';\n\nexport interface IDraggableZoneStyles {\n  root: string;\n}\n\nexport const getClassNames = memoizeFunction(\n  (className: string, isDragging: boolean): IDraggableZoneStyles => {\n    return {\n      root: mergeStyles(\n        className,\n        isDragging && {\n          touchAction: 'none',\n          selectors: {\n            '& *': {\n              userSelect: 'none',\n            },\n          },\n        },\n      ),\n    };\n  },\n);\n","import * as React from 'react';\nimport { getClassNames } from './DraggableZone.styles';\nimport { on } from '../../Utilities';\nimport type { IDraggableZoneProps, ICoordinates, IDragData } from './DraggableZone.types';\n\nexport interface IDraggableZoneState {\n  isDragging: boolean;\n  position: ICoordinates;\n  lastPosition?: ICoordinates;\n}\n\nconst eventMapping = {\n  touch: {\n    start: 'touchstart',\n    move: 'touchmove',\n    stop: 'touchend',\n  },\n  mouse: {\n    start: 'mousedown',\n    move: 'mousemove',\n    stop: 'mouseup',\n  },\n};\n\n// These are needed so that we can generalize the events\n// and so we have access to clientX and clientY in the touch events\ntype MouseTouchEvent<T> = React.MouseEvent<T> & React.TouchEvent<T> & Event;\n\nexport class DraggableZone extends React.Component<IDraggableZoneProps, IDraggableZoneState> {\n  private _touchId?: number;\n  private _currentEventType = eventMapping.mouse;\n  private _events: (() => void)[] = [];\n\n  constructor(props: IDraggableZoneProps) {\n    super(props);\n\n    this.state = {\n      isDragging: false,\n      position: this.props.position || { x: 0, y: 0 },\n      lastPosition: undefined,\n    };\n  }\n\n  public componentDidUpdate(prevProps: IDraggableZoneProps) {\n    if (this.props.position && (!prevProps.position || this.props.position !== prevProps.position)) {\n      this.setState({ position: this.props.position });\n    }\n  }\n\n  public componentWillUnmount() {\n    this._events.forEach(dispose => dispose());\n  }\n\n  public render() {\n    const child: any = React.Children.only(this.props.children);\n    const { props } = child;\n    const { position } = this.props;\n    const { position: statePosition, isDragging } = this.state;\n    let x = statePosition.x;\n    let y = statePosition.y;\n\n    if (position && !isDragging) {\n      x = position.x;\n      y = position.y;\n    }\n\n    return React.cloneElement(child, {\n      style: {\n        ...props.style,\n        transform: `translate(${x}px, ${y}px)`,\n      },\n      className: getClassNames(props.className, this.state.isDragging).root,\n      onMouseDown: this._onMouseDown,\n      onMouseUp: this._onMouseUp,\n      onTouchStart: this._onTouchStart,\n      onTouchEnd: this._onTouchEnd,\n    });\n  }\n\n  private _onMouseDown = (event: MouseTouchEvent<HTMLElement>) => {\n    const onMouseDown = (React.Children.only(this.props.children) as any).props.onMouseDown;\n    if (onMouseDown) {\n      onMouseDown(event);\n    }\n\n    this._currentEventType = eventMapping.mouse;\n    return this._onDragStart(event);\n  };\n\n  private _onMouseUp = (event: MouseTouchEvent<HTMLElement>) => {\n    const onMouseUp = (React.Children.only(this.props.children) as any).props.onMouseUp;\n    if (onMouseUp) {\n      onMouseUp(event);\n    }\n\n    this._currentEventType = eventMapping.mouse;\n    return this._onDragStop(event);\n  };\n\n  private _onTouchStart = (event: MouseTouchEvent<HTMLElement>) => {\n    const onTouchStart = (React.Children.only(this.props.children) as any).props.onTouchStart;\n    if (onTouchStart) {\n      onTouchStart(event);\n    }\n\n    this._currentEventType = eventMapping.touch;\n    return this._onDragStart(event);\n  };\n\n  private _onTouchEnd = (event: MouseTouchEvent<HTMLElement>) => {\n    const onTouchEnd = (React.Children.only(this.props.children) as any).props.onTouchEnd;\n    if (onTouchEnd) {\n      onTouchEnd(event);\n    }\n\n    this._currentEventType = eventMapping.touch;\n    this._onDragStop(event);\n  };\n\n  private _onDragStart = (event: MouseTouchEvent<HTMLElement>) => {\n    // Only handle left click for dragging\n    if (typeof event.button === 'number' && event.button !== 0) {\n      return false;\n    }\n\n    // If the target doesn't match the handleSelector OR\n    // if the target does match the preventDragSelector, bail out\n    if (\n      (this.props.handleSelector && !this._matchesSelector(event.target as HTMLElement, this.props.handleSelector)) ||\n      (this.props.preventDragSelector &&\n        this._matchesSelector(event.target as HTMLElement, this.props.preventDragSelector))\n    ) {\n      return;\n    }\n\n    // Remember the touch identifier if this is a touch event so we can\n    // distinguish between individual touches in multitouch scenarios\n    // by remembering which touch point we were given\n    this._touchId = this._getTouchId(event);\n\n    const position = this._getControlPosition(event);\n    if (position === undefined) {\n      return;\n    }\n\n    const dragData = this._createDragDataFromPosition(position);\n    this.props.onStart && this.props.onStart(event, dragData);\n\n    this.setState({\n      isDragging: true,\n      lastPosition: position,\n    });\n\n    // hook up the appropriate mouse/touch events to the body to ensure\n    // smooth dragging\n    this._events = [\n      on(document.body, this._currentEventType.move, this._onDrag, true /* use capture phase */),\n      on(document.body, this._currentEventType.stop, this._onDragStop, true /* use capture phase */),\n    ];\n  };\n\n  private _onDrag = (event: MouseTouchEvent<HTMLElement>) => {\n    // Prevent scrolling on mobile devices\n    if (event.type === 'touchmove') {\n      event.preventDefault();\n    }\n\n    const position = this._getControlPosition(event);\n    if (!position) {\n      return;\n    }\n\n    // create the updated drag data from the position data\n    const updatedData = this._createUpdatedDragData(this._createDragDataFromPosition(position));\n    const updatedPosition = updatedData.position;\n\n    this.props.onDragChange && this.props.onDragChange(event, updatedData);\n\n    this.setState({\n      position: updatedPosition,\n      lastPosition: position,\n    });\n  };\n\n  private _onDragStop = (event: MouseTouchEvent<HTMLElement>) => {\n    if (!this.state.isDragging) {\n      return;\n    }\n\n    const position = this._getControlPosition(event);\n    if (!position) {\n      return;\n    }\n\n    const baseDragData = this._createDragDataFromPosition(position);\n\n    // Set dragging to false and reset the lastPosition\n    this.setState({\n      isDragging: false,\n      lastPosition: undefined,\n    });\n\n    this.props.onStop && this.props.onStop(event, baseDragData);\n\n    if (this.props.position) {\n      this.setState({\n        position: this.props.position,\n      });\n    }\n\n    // Remove event handlers\n    this._events.forEach(dispose => dispose());\n  };\n\n  /**\n   * Get the control position based off the event that fired\n   * @param event - The event to get offsets from\n   */\n  private _getControlPosition(event: MouseTouchEvent<HTMLElement>): ICoordinates | undefined {\n    const touchObj = this._getActiveTouch(event);\n\n    // did we get the right touch?\n    if (this._touchId !== undefined && !touchObj) {\n      return undefined;\n    }\n\n    const eventToGetOffset = touchObj || event;\n    return {\n      x: eventToGetOffset.clientX,\n      y: eventToGetOffset.clientY,\n    };\n  }\n\n  /**\n   * Get the active touch point that we have saved from the event's TouchList\n   * @param event - The event used to get the TouchList for the active touch point\n   */\n  private _getActiveTouch(event: MouseTouchEvent<HTMLElement>): React.Touch | undefined {\n    return (\n      (event.targetTouches && this._findTouchInTouchList(event.targetTouches)) ||\n      (event.changedTouches && this._findTouchInTouchList(event.changedTouches))\n    );\n  }\n\n  /**\n   * Get the initial touch identifier associated with the given event\n   * @param event - The event that contains the TouchList\n   */\n  private _getTouchId(event: MouseTouchEvent<HTMLElement>): number | undefined {\n    const touch: React.Touch | undefined =\n      (event.targetTouches && event.targetTouches[0]) || (event.changedTouches && event.changedTouches[0]);\n\n    if (touch) {\n      return touch.identifier;\n    }\n  }\n\n  /**\n   * Returns if an element (or any of the element's parents) match the given selector\n   */\n  private _matchesSelector(element: HTMLElement | null, selector: string): boolean {\n    if (!element || element === document.body) {\n      return false;\n    }\n\n    const matchesSelectorFn: Function =\n      element.matches || element.webkitMatchesSelector || (element as any).msMatchesSelector; /* for IE */\n\n    if (!matchesSelectorFn) {\n      return false;\n    }\n\n    return matchesSelectorFn.call(element, selector) || this._matchesSelector(element.parentElement, selector);\n  }\n\n  /**\n   * Attempts to find the Touch that matches the identifier  we stored in dragStart\n   * @param touchList The TouchList to look for the stored identifier from dragStart\n   */\n  private _findTouchInTouchList(touchList: React.TouchList): React.Touch | undefined {\n    if (this._touchId === undefined) {\n      return;\n    }\n\n    for (let i = 0; i < touchList.length; i++) {\n      if (touchList[i].identifier === this._touchId) {\n        return touchList[i];\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Create DragData based off of the last known position and the new position passed in\n   * @param position The new position as part of the drag\n   */\n  private _createDragDataFromPosition(position: ICoordinates): IDragData {\n    const { lastPosition } = this.state;\n\n    // If we have no lastPosition, use the given position\n    // for last position\n    if (lastPosition === undefined) {\n      return {\n        delta: { x: 0, y: 0 },\n        lastPosition: position,\n        position,\n      };\n    }\n\n    return {\n      delta: {\n        x: position.x - lastPosition.x,\n        y: position.y - lastPosition.y,\n      },\n      lastPosition,\n      position,\n    };\n  }\n\n  /**\n   * Creates an updated DragData based off the current position and given baseDragData\n   * @param baseDragData The base DragData (from _createDragDataFromPosition) used to calculate the updated positions\n   */\n  private _createUpdatedDragData(baseDragData: IDragData): IDragData {\n    const { position } = this.state;\n    return {\n      position: {\n        x: position.x + baseDragData.delta.x,\n        y: position.y + baseDragData.delta.y,\n      },\n      delta: baseDragData.delta,\n      lastPosition: position,\n    };\n  }\n}\n","import * as React from 'react';\nimport {\n  classNamesFunction,\n  allowScrollOnElement,\n  allowOverscrollOnElement,\n  getPropsWithDefaults,\n  KeyCodes,\n  elementContains,\n  EventGroup,\n} from '../../Utilities';\nimport { FocusTrapZone } from '../../FocusTrapZone';\nimport { animationDuration } from './Modal.styles';\nimport { Overlay } from '../../Overlay';\nimport { Layer } from '../../Layer';\nimport { Popup } from '../../Popup';\nimport { ResponsiveMode, useResponsiveMode } from '../../ResponsiveMode';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { Icon } from '../../Icon';\nimport { DraggableZone } from '../../utilities/DraggableZone/index';\nimport { useWindow } from '@fluentui/react-window-provider';\nimport {\n  useBoolean,\n  useMergedRefs,\n  useWarnings,\n  useConst,\n  useSetTimeout,\n  useId,\n  useUnmount,\n} from '@fluentui/react-hooks';\nimport type { IFocusTrapZone } from '../../FocusTrapZone';\nimport type { IDragOptions, IModalProps, IModalStyleProps, IModalStyles } from './Modal.types';\nimport type { ILayerProps } from '../../Layer';\nimport type { ICoordinates, IDragData } from '../../utilities/DraggableZone/index';\n\n// @TODO - need to change this to a panel whenever the breakpoint is under medium (verify the spec)\n\ninterface IModalInternalState {\n  onModalCloseTimer: number;\n  allowTouchBodyScroll?: boolean;\n  scrollableContent: HTMLDivElement | null;\n  lastSetCoordinates: ICoordinates;\n  /** Minimum clamped position, if dragging and clamping (`dragOptions.keepInBounds`) are enabled */\n  minPosition?: ICoordinates;\n  /** Maximum clamped position, if dragging and clamping (`dragOptions.keepInBounds`) are enabled */\n  maxPosition?: ICoordinates;\n  events: EventGroup;\n  /** Ensures we dispose the same keydown callback as was registered */\n  disposeOnKeyDown?: () => void;\n  /** Ensures we dispose the same keyup callback as was registered (also tracks whether keyup has been registered) */\n  disposeOnKeyUp?: () => void;\n  isInKeyboardMoveMode?: boolean;\n  hasBeenOpened?: boolean;\n}\n\nconst ZERO: ICoordinates = { x: 0, y: 0 };\n\nconst DEFAULT_PROPS: Partial<IModalProps> = {\n  isOpen: false,\n  isDarkOverlay: true,\n  className: '',\n  containerClassName: '',\n};\n\nconst getClassNames = classNamesFunction<IModalStyleProps, IModalStyles>();\n\nconst getMoveDelta = (ev: React.KeyboardEvent<HTMLElement>): number => {\n  let delta = 10;\n  if (ev.shiftKey) {\n    if (!ev.ctrlKey) {\n      delta = 50;\n    }\n  } else if (ev.ctrlKey) {\n    delta = 1;\n  }\n\n  return delta;\n};\n\nconst useComponentRef = (props: IModalProps, focusTrapZone: React.RefObject<IFocusTrapZone>) => {\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      focus() {\n        if (focusTrapZone.current) {\n          focusTrapZone.current.focus();\n        }\n      },\n    }),\n    [focusTrapZone],\n  );\n};\n\nexport const ModalBase: React.FunctionComponent<IModalProps> = React.forwardRef<HTMLDivElement, IModalProps>(\n  (propsWithoutDefaults, ref) => {\n    const props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);\n    const {\n      allowTouchBodyScroll,\n      className,\n      children,\n      containerClassName,\n      scrollableContentClassName,\n      elementToFocusOnDismiss,\n      firstFocusableSelector,\n      forceFocusInsideTrap,\n      ignoreExternalFocusing,\n      isBlocking,\n      isAlert,\n      isClickableOutsideFocusTrap,\n      isDarkOverlay,\n      onDismiss,\n      layerProps,\n      overlay,\n      isOpen,\n      titleAriaId,\n      styles,\n      subtitleAriaId,\n      theme,\n      topOffsetFixed,\n      responsiveMode,\n      // eslint-disable-next-line deprecation/deprecation\n      onLayerDidMount,\n      isModeless,\n      dragOptions,\n      onDismissed,\n      enableAriaHiddenSiblings,\n    } = props;\n\n    const rootRef = React.useRef<HTMLDivElement>(null);\n    const focusTrapZone = React.useRef<IFocusTrapZone>(null);\n    const focusTrapZoneElm = React.useRef<HTMLDivElement>(null);\n    const mergedRef = useMergedRefs(rootRef, ref);\n\n    const modalResponsiveMode = useResponsiveMode(mergedRef);\n\n    const focusTrapZoneId = useId('ModalFocusTrapZone');\n\n    const win = useWindow();\n\n    const { setTimeout, clearTimeout } = useSetTimeout();\n\n    const [isModalOpen, setIsModalOpen] = React.useState(isOpen);\n    const [isVisible, setIsVisible] = React.useState(isOpen);\n    const [coordinates, setCoordinates] = React.useState<ICoordinates>(ZERO);\n    const [modalRectangleTop, setModalRectangleTop] = React.useState<number | undefined>();\n\n    const [isModalMenuOpen, { toggle: toggleModalMenuOpen, setFalse: setModalMenuClose }] = useBoolean(false);\n\n    const internalState = useConst<IModalInternalState>(() => ({\n      onModalCloseTimer: 0,\n      allowTouchBodyScroll,\n      scrollableContent: null,\n      lastSetCoordinates: ZERO,\n      events: new EventGroup({}),\n    }));\n\n    const { keepInBounds } = dragOptions || ({} as IDragOptions);\n    const isAlertRole = isAlert ?? (isBlocking && !isModeless);\n\n    const layerClassName = layerProps === undefined ? '' : layerProps.className;\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      containerClassName,\n      scrollableContentClassName,\n      isOpen,\n      isVisible,\n      hasBeenOpened: internalState.hasBeenOpened,\n      modalRectangleTop,\n      topOffsetFixed,\n      isModeless,\n      layerClassName,\n      windowInnerHeight: win?.innerHeight,\n      isDefaultDragHandle: dragOptions && !dragOptions.dragHandleSelector,\n    });\n\n    const mergedLayerProps: ILayerProps = {\n      eventBubblingEnabled: false,\n      ...layerProps,\n      onLayerDidMount: layerProps && layerProps.onLayerDidMount ? layerProps.onLayerDidMount : onLayerDidMount,\n      insertFirst: isModeless,\n      className: classNames.layer,\n    };\n\n    // Allow the user to scroll within the modal but not on the body\n    const allowScrollOnModal = React.useCallback(\n      (elt: HTMLDivElement | null): void => {\n        if (elt) {\n          if (internalState.allowTouchBodyScroll) {\n            allowOverscrollOnElement(elt, internalState.events);\n          } else {\n            allowScrollOnElement(elt, internalState.events);\n          }\n        } else {\n          internalState.events.off(internalState.scrollableContent);\n        }\n        internalState.scrollableContent = elt;\n      },\n      [internalState],\n    );\n\n    const registerInitialModalPosition = (): void => {\n      const dialogMain = focusTrapZoneElm.current;\n      const modalRectangle = dialogMain?.getBoundingClientRect();\n\n      if (modalRectangle) {\n        if (topOffsetFixed) {\n          setModalRectangleTop(modalRectangle.top);\n        }\n\n        if (keepInBounds) {\n          // x/y are unavailable in IE, so use the equivalent left/top\n          internalState.minPosition = { x: -modalRectangle.left, y: -modalRectangle.top };\n          internalState.maxPosition = { x: modalRectangle.left, y: modalRectangle.top };\n        }\n      }\n    };\n\n    /**\n     * Clamps an axis to a specified min and max position.\n     *\n     * @param axis A string that represents the axis (x/y).\n     * @param position The position on the axis.\n     */\n    const getClampedAxis = React.useCallback(\n      (axis: keyof ICoordinates, position: number) => {\n        const { minPosition, maxPosition } = internalState;\n        if (keepInBounds && minPosition && maxPosition) {\n          position = Math.max(minPosition[axis], position);\n          position = Math.min(maxPosition[axis], position);\n        }\n        return position;\n      },\n      [keepInBounds, internalState],\n    );\n\n    const handleModalClose = (): void => {\n      internalState.lastSetCoordinates = ZERO;\n\n      setModalMenuClose();\n      internalState.isInKeyboardMoveMode = false;\n      setIsModalOpen(false);\n      setCoordinates(ZERO);\n\n      internalState.disposeOnKeyUp?.();\n\n      onDismissed?.();\n    };\n\n    const handleDragStart = React.useCallback((): void => {\n      setModalMenuClose();\n      internalState.isInKeyboardMoveMode = false;\n    }, [internalState, setModalMenuClose]);\n\n    const handleDrag = React.useCallback(\n      (ev: React.MouseEvent<HTMLElement> & React.TouchEvent<HTMLElement>, dragData: IDragData): void => {\n        setCoordinates(prevValue => ({\n          x: getClampedAxis('x', prevValue.x + dragData.delta.x),\n          y: getClampedAxis('y', prevValue.y + dragData.delta.y),\n        }));\n      },\n      [getClampedAxis],\n    );\n\n    const handleDragStop = React.useCallback((): void => {\n      if (focusTrapZone.current) {\n        focusTrapZone.current.focus();\n      }\n    }, []);\n\n    const handleEnterKeyboardMoveMode = () => {\n      // We need a global handleKeyDown event when we are in the move mode so that we can\n      // handle the key presses and the components inside the modal do not get the events\n      const handleKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n        if (ev.altKey && ev.ctrlKey && ev.keyCode === KeyCodes.space) {\n          // CTRL + ALT + SPACE is handled during keyUp\n          ev.preventDefault();\n          ev.stopPropagation();\n          return;\n        }\n\n        if (isModalMenuOpen && (ev.altKey || ev.keyCode === KeyCodes.escape)) {\n          setModalMenuClose();\n        }\n\n        if (internalState.isInKeyboardMoveMode && (ev.keyCode === KeyCodes.escape || ev.keyCode === KeyCodes.enter)) {\n          internalState.isInKeyboardMoveMode = false;\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n\n        if (internalState.isInKeyboardMoveMode) {\n          let handledEvent = true;\n          const delta = getMoveDelta(ev);\n\n          switch (ev.keyCode) {\n            /* eslint-disable no-fallthrough */\n            case KeyCodes.escape:\n              setCoordinates(internalState.lastSetCoordinates);\n            case KeyCodes.enter: {\n              // TODO: determine if fallthrough was intentional\n              /* eslint-enable no-fallthrough */\n              internalState.lastSetCoordinates = ZERO;\n              // setIsInKeyboardMoveMode(false);\n              break;\n            }\n            case KeyCodes.up: {\n              setCoordinates(prevValue => ({ x: prevValue.x, y: getClampedAxis('y', prevValue.y - delta) }));\n              break;\n            }\n            case KeyCodes.down: {\n              setCoordinates(prevValue => ({ x: prevValue.x, y: getClampedAxis('y', prevValue.y + delta) }));\n              break;\n            }\n            case KeyCodes.left: {\n              setCoordinates(prevValue => ({ x: getClampedAxis('x', prevValue.x - delta), y: prevValue.y }));\n              break;\n            }\n            case KeyCodes.right: {\n              setCoordinates(prevValue => ({ x: getClampedAxis('x', prevValue.x + delta), y: prevValue.y }));\n              break;\n            }\n            default: {\n              handledEvent = false;\n            }\n          }\n          if (handledEvent) {\n            ev.preventDefault();\n            ev.stopPropagation();\n          }\n        }\n      };\n\n      internalState.lastSetCoordinates = coordinates;\n      setModalMenuClose();\n      internalState.isInKeyboardMoveMode = true;\n\n      internalState.events.on(win, 'keydown', handleKeyDown, true /* useCapture */);\n      internalState.disposeOnKeyDown = () => {\n        internalState.events.off(win, 'keydown', handleKeyDown, true /* useCapture */);\n        internalState.disposeOnKeyDown = undefined;\n      };\n    };\n\n    const handleExitKeyboardMoveMode = () => {\n      internalState.lastSetCoordinates = ZERO;\n      internalState.isInKeyboardMoveMode = false;\n      internalState.disposeOnKeyDown?.();\n    };\n\n    const registerForKeyUp = (): void => {\n      const handleKeyUp = (ev: React.KeyboardEvent<HTMLElement>): void => {\n        // Needs to handle the CTRL + ALT + SPACE key during keyup due to FireFox bug:\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1220143\n        if (ev.altKey && ev.ctrlKey && ev.keyCode === KeyCodes.space) {\n          if (elementContains(internalState.scrollableContent, ev.target as HTMLElement)) {\n            toggleModalMenuOpen();\n            ev.preventDefault();\n            ev.stopPropagation();\n          }\n        }\n      };\n\n      if (!internalState.disposeOnKeyUp) {\n        internalState.events.on(win, 'keyup', handleKeyUp, true /* useCapture */);\n        internalState.disposeOnKeyUp = () => {\n          internalState.events.off(win, 'keyup', handleKeyUp, true /* useCapture */);\n          internalState.disposeOnKeyUp = undefined;\n        };\n      }\n    };\n\n    React.useEffect(() => {\n      clearTimeout(internalState.onModalCloseTimer);\n      // Opening the dialog\n      if (isOpen) {\n        // This must be done after the modal content has rendered\n        requestAnimationFrame(() => setTimeout(registerInitialModalPosition, 0));\n\n        setIsModalOpen(true);\n\n        // Add a keyUp handler for all key up events once the dialog is open.\n        if (dragOptions) {\n          registerForKeyUp();\n        }\n\n        internalState.hasBeenOpened = true;\n        setIsVisible(true);\n      }\n\n      // Closing the dialog\n      if (!isOpen && isModalOpen) {\n        internalState.onModalCloseTimer = setTimeout(handleModalClose, parseFloat(animationDuration) * 1000);\n        setIsVisible(false);\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run if isModalOpen or isOpen mutates.\n    }, [isModalOpen, isOpen]);\n\n    useUnmount(() => {\n      internalState.events.dispose();\n    });\n\n    useComponentRef(props, focusTrapZone);\n    useDebugWarnings(props);\n\n    const modalContent = (\n      <FocusTrapZone\n        id={focusTrapZoneId}\n        ref={focusTrapZoneElm}\n        componentRef={focusTrapZone}\n        className={classNames.main}\n        elementToFocusOnDismiss={elementToFocusOnDismiss}\n        isClickableOutsideFocusTrap={isModeless || isClickableOutsideFocusTrap || !isBlocking}\n        ignoreExternalFocusing={ignoreExternalFocusing}\n        forceFocusInsideTrap={isModeless ? !isModeless : forceFocusInsideTrap}\n        firstFocusableSelector={firstFocusableSelector}\n        focusPreviouslyFocusedInnerElement\n        onBlur={internalState.isInKeyboardMoveMode ? handleExitKeyboardMoveMode : undefined}\n        enableAriaHiddenSiblings={enableAriaHiddenSiblings}\n      >\n        {dragOptions && internalState.isInKeyboardMoveMode && (\n          <div className={classNames.keyboardMoveIconContainer}>\n            {dragOptions.keyboardMoveIconProps ? (\n              <Icon {...dragOptions.keyboardMoveIconProps} />\n            ) : (\n              <Icon iconName=\"move\" className={classNames.keyboardMoveIcon} />\n            )}\n          </div>\n        )}\n        <div ref={allowScrollOnModal} className={classNames.scrollableContent} data-is-scrollable>\n          {dragOptions && isModalMenuOpen && (\n            <dragOptions.menu\n              items={[\n                { key: 'move', text: dragOptions.moveMenuItemText, onClick: handleEnterKeyboardMoveMode },\n                { key: 'close', text: dragOptions.closeMenuItemText, onClick: handleModalClose },\n              ]}\n              onDismiss={setModalMenuClose}\n              alignTargetEdge\n              coverTarget\n              directionalHint={DirectionalHint.topLeftEdge}\n              directionalHintFixed\n              shouldFocusOnMount\n              target={internalState.scrollableContent}\n            />\n          )}\n          {children}\n        </div>\n      </FocusTrapZone>\n    );\n\n    return (\n      (isModalOpen && modalResponsiveMode! >= (responsiveMode || ResponsiveMode.small) && (\n        <Layer ref={mergedRef} {...mergedLayerProps}>\n          <Popup\n            role={isAlertRole ? 'alertdialog' : 'dialog'}\n            aria-modal={!isModeless}\n            ariaLabelledBy={titleAriaId}\n            ariaDescribedBy={subtitleAriaId}\n            onDismiss={onDismiss}\n            shouldRestoreFocus={!ignoreExternalFocusing}\n          >\n            <div className={classNames.root} role={!isModeless ? 'document' : undefined}>\n              {!isModeless && (\n                <Overlay\n                  aria-hidden={true}\n                  isDarkThemed={isDarkOverlay}\n                  onClick={isBlocking ? undefined : onDismiss}\n                  allowTouchBodyScroll={allowTouchBodyScroll}\n                  {...overlay}\n                />\n              )}\n              {dragOptions ? (\n                <DraggableZone\n                  handleSelector={dragOptions.dragHandleSelector || `#${focusTrapZoneId}`}\n                  preventDragSelector=\"button\"\n                  onStart={handleDragStart}\n                  onDragChange={handleDrag}\n                  onStop={handleDragStop}\n                  position={coordinates}\n                >\n                  {modalContent}\n                </DraggableZone>\n              ) : (\n                modalContent\n              )}\n            </div>\n          </Popup>\n        </Layer>\n      )) ||\n      null\n    );\n  },\n);\nModalBase.displayName = 'Modal';\n\nfunction useDebugWarnings(props: IModalProps) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: 'Modal',\n      props,\n      deprecations: { onLayerDidMount: 'layerProps.onLayerDidMount' },\n    });\n  }\n}\n","import * as React from 'react';\n\n/**\n * Hook which synchronously executes a callback when the component is about to unmount.\n *\n * @param callback - Function to call during unmount.\n */\nexport const useUnmount = (callback: () => void) => {\n  const unmountRef = React.useRef(callback);\n  unmountRef.current = callback;\n  React.useEffect(\n    () => () => {\n      unmountRef.current?.();\n    },\n    [],\n  );\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { ModalBase } from './Modal.base';\nimport { getStyles } from './Modal.styles';\nimport type { IModalProps, IModalStyleProps, IModalStyles } from './Modal.types';\n\nexport const Modal: React.FunctionComponent<IModalProps> = styled<IModalProps, IModalStyleProps, IModalStyles>(\n  ModalBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Modal',\n    fields: ['theme', 'styles', 'enableAriaHiddenSiblings'],\n  },\n);\nModal.displayName = 'Modal';\n","import * as React from 'react';\nimport { classNamesFunction, css, warnDeprecations, initializeComponentRef } from '../../Utilities';\nimport { DialogType } from './DialogContent.types';\nimport { IconButton } from '../../Button';\nimport { DialogFooter } from './DialogFooter';\nimport { withResponsiveMode } from '../../ResponsiveMode';\nimport type { IDialogContentProps, IDialogContentStyleProps, IDialogContentStyles } from './DialogContent.types';\nimport type { IDialogFooterProps } from './DialogFooter.types';\n\nconst getClassNames = classNamesFunction<IDialogContentStyleProps, IDialogContentStyles>();\n\nconst DialogFooterType = ((<DialogFooter />) as React.ReactElement<IDialogFooterProps>).type;\n\nconst COMPONENT_NAME = 'DialogContent';\n\n// eslint-disable-next-line deprecation/deprecation\n@withResponsiveMode\nexport class DialogContentBase extends React.Component<IDialogContentProps, {}> {\n  public static defaultProps: IDialogContentProps = {\n    showCloseButton: false,\n    className: '',\n    topButtonsProps: [],\n    closeButtonAriaLabel: 'Close',\n  };\n\n  constructor(props: IDialogContentProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    warnDeprecations(COMPONENT_NAME, props, {\n      titleId: 'titleProps.id',\n    });\n  }\n\n  public render(): JSX.Element {\n    const {\n      showCloseButton,\n      className,\n      closeButtonAriaLabel,\n      onDismiss,\n      subTextId,\n      subText,\n      titleProps = {},\n      // eslint-disable-next-line deprecation/deprecation\n      titleId,\n      title,\n      type,\n      styles,\n      theme,\n      draggableHeaderClassName,\n    } = this.props;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      isLargeHeader: type === DialogType.largeHeader,\n      isClose: type === DialogType.close,\n      draggableHeaderClassName,\n    });\n\n    const groupings = this._groupChildren();\n    let subTextContent;\n    if (subText) {\n      subTextContent = (\n        <p className={classNames.subText} id={subTextId}>\n          {subText}\n        </p>\n      );\n    }\n\n    return (\n      <div className={classNames.content}>\n        <div className={classNames.header}>\n          <div\n            id={titleId}\n            role=\"heading\"\n            aria-level={1}\n            {...titleProps}\n            className={css(classNames.title, titleProps.className)}\n          >\n            {title}\n          </div>\n          <div className={classNames.topButton}>\n            {this.props.topButtonsProps!.map((props, index) => (\n              <IconButton key={props.uniqueId || index} {...props} />\n            ))}\n            {(type === DialogType.close || (showCloseButton && type !== DialogType.largeHeader)) && (\n              <IconButton\n                className={classNames.button}\n                iconProps={{ iconName: 'Cancel' }}\n                ariaLabel={closeButtonAriaLabel}\n                onClick={onDismiss as any}\n              />\n            )}\n          </div>\n        </div>\n        <div className={classNames.inner}>\n          <div className={classNames.innerContent}>\n            {subTextContent}\n            {groupings.contents}\n          </div>\n          {groupings.footers}\n        </div>\n      </div>\n    );\n  }\n\n  // @TODO - typing the footers as an array of DialogFooter is difficult because\n  // casing \"child as DialogFooter\" causes a problem because\n  // \"Neither type 'ReactElement<any>' nor type 'DialogFooter' is assignable to the other.\"\n  private _groupChildren(): { footers: any[]; contents: any[] } {\n    const groupings: { footers: any[]; contents: any[] } = {\n      footers: [],\n      contents: [],\n    };\n\n    React.Children.map(this.props.children, child => {\n      if (typeof child === 'object' && child !== null && (child as any).type === DialogFooterType) {\n        groupings.footers.push(child);\n      } else {\n        groupings.contents.push(child);\n      }\n    });\n\n    return groupings;\n  }\n}\n","import {\n  FontWeights,\n  getGlobalClassNames,\n  IconFontSizes,\n  ScreenWidthMinSmall,\n  ScreenWidthMaxSmall,\n} from '../../Styling';\nimport type { IDialogContentStyleProps, IDialogContentStyles } from './DialogContent.types';\n\nconst GlobalClassNames = {\n  contentLgHeader: 'ms-Dialog-lgHeader',\n  close: 'ms-Dialog--close',\n  subText: 'ms-Dialog-subText',\n  header: 'ms-Dialog-header',\n  headerLg: 'ms-Dialog--lgHeader',\n  button: 'ms-Dialog-button ms-Dialog-button--close',\n  inner: 'ms-Dialog-inner',\n  content: 'ms-Dialog-content',\n  title: 'ms-Dialog-title',\n};\n\nexport const getStyles = (props: IDialogContentStyleProps): IDialogContentStyles => {\n  const { className, theme, isLargeHeader, isClose, hidden, isMultiline, draggableHeaderClassName } = props;\n\n  const { palette, fonts, effects, semanticColors } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    content: [\n      isLargeHeader && [\n        classNames.contentLgHeader,\n        {\n          borderTop: `4px solid ${palette.themePrimary}`,\n        },\n      ],\n      isClose && classNames.close,\n      {\n        flexGrow: 1,\n        overflowY: 'hidden', // required for allowScrollOnElement\n      },\n      className,\n    ],\n\n    subText: [\n      classNames.subText,\n      fonts.medium,\n      {\n        margin: '0 0 24px 0',\n        color: semanticColors.bodySubtext,\n        lineHeight: '1.5',\n        wordWrap: 'break-word',\n        fontWeight: FontWeights.regular,\n      },\n    ],\n\n    header: [\n      classNames.header,\n      {\n        position: 'relative',\n        width: '100%',\n        boxSizing: 'border-box',\n      },\n      isClose && classNames.close,\n      draggableHeaderClassName && [\n        draggableHeaderClassName,\n        {\n          cursor: 'move',\n        },\n      ],\n    ],\n\n    button: [\n      classNames.button,\n      hidden && {\n        selectors: {\n          '.ms-Icon.ms-Icon--Cancel': {\n            color: semanticColors.buttonText,\n            fontSize: IconFontSizes.medium,\n          },\n        },\n      },\n    ],\n\n    inner: [\n      classNames.inner,\n      {\n        padding: '0 24px 24px',\n        selectors: {\n          [`@media (min-width: ${ScreenWidthMinSmall}px) and (max-width: ${ScreenWidthMaxSmall}px)`]: {\n            padding: '0 16px 16px',\n          },\n        },\n      },\n    ],\n\n    innerContent: [\n      classNames.content,\n      {\n        position: 'relative',\n        width: '100%',\n      },\n    ],\n\n    title: [\n      classNames.title,\n      fonts.xLarge,\n      {\n        color: semanticColors.bodyText,\n        margin: '0',\n        minHeight: fonts.xLarge.fontSize,\n        padding: '16px 46px 20px 24px',\n        lineHeight: 'normal',\n        selectors: {\n          [`@media (min-width: ${ScreenWidthMinSmall}px) and (max-width: ${ScreenWidthMaxSmall}px)`]: {\n            padding: '16px 46px 16px 16px',\n          },\n        },\n      },\n      isLargeHeader && {\n        color: semanticColors.menuHeader,\n      },\n      isMultiline && { fontSize: fonts.xxLarge.fontSize },\n    ],\n\n    topButton: [\n      {\n        display: 'flex',\n        flexDirection: 'row',\n        flexWrap: 'nowrap',\n        position: 'absolute',\n        top: '0',\n        right: '0',\n        padding: '15px 15px 0 0',\n        selectors: {\n          '> *': {\n            flex: '0 0 auto',\n          },\n          '.ms-Dialog-button': {\n            color: semanticColors.buttonText,\n          },\n          '.ms-Dialog-button:hover': {\n            color: semanticColors.buttonTextHovered,\n            borderRadius: effects.roundedCorner2,\n          },\n          [`@media (min-width: ${ScreenWidthMinSmall}px) and (max-width: ${ScreenWidthMaxSmall}px)`]: {\n            padding: '15px 8px 0 0',\n          },\n        },\n      },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { DialogContentBase } from './DialogContent.base';\nimport { getStyles } from './DialogContent.styles';\nimport type { IDialogContentProps, IDialogContentStyleProps, IDialogContentStyles } from './DialogContent.types';\n\nexport const DialogContent: React.FunctionComponent<IDialogContentProps> = styled<\n  IDialogContentProps,\n  IDialogContentStyleProps,\n  IDialogContentStyles\n>(DialogContentBase, getStyles, undefined, { scope: 'DialogContent' });\n","import * as React from 'react';\nimport { warnDeprecations, classNamesFunction, getId } from '../../Utilities';\nimport { DialogType } from './DialogContent.types';\nimport { Modal } from '../../Modal';\nimport { withResponsiveMode } from '../../ResponsiveMode';\n\nconst getClassNames = classNamesFunction<IDialogStyleProps, IDialogStyles>();\n\nimport { DialogContent } from './DialogContent';\nimport type { IDialogProps, IDialogStyleProps, IDialogStyles } from './Dialog.types';\nimport type { IDialogContentProps } from './DialogContent.types';\nimport type { IModalProps, IDragOptions } from '../../Modal';\nimport type { ILayerProps } from '../../Layer';\n\nconst DefaultModalProps: IModalProps = {\n  isDarkOverlay: false,\n  isBlocking: false,\n  className: '',\n  containerClassName: '',\n  topOffsetFixed: false,\n};\n\nconst DefaultDialogContentProps: IDialogContentProps = {\n  type: DialogType.normal,\n  className: '',\n  topButtonsProps: [],\n};\n\n// eslint-disable-next-line deprecation/deprecation\n@withResponsiveMode\nexport class DialogBase extends React.Component<IDialogProps, {}> {\n  public static defaultProps: IDialogProps = {\n    hidden: true,\n  };\n\n  private _id: string;\n  private _defaultTitleTextId: string;\n  private _defaultSubTextId: string;\n\n  constructor(props: IDialogProps) {\n    super(props);\n\n    this._id = getId('Dialog');\n    this._defaultTitleTextId = this._id + '-title';\n    this._defaultSubTextId = this._id + '-subText';\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnDeprecations('Dialog', props, {\n        isOpen: 'hidden',\n        type: 'dialogContentProps.type',\n        subText: 'dialogContentProps.subText',\n        contentClassName: 'dialogContentProps.className',\n        topButtonsProps: 'dialogContentProps.topButtonsProps',\n        className: 'modalProps.className',\n        isDarkOverlay: 'modalProps.isDarkOverlay',\n        isBlocking: 'modalProps.isBlocking',\n        containerClassName: 'modalProps.containerClassName',\n        onDismissed: 'modalProps.onDismissed',\n        onLayerDidMount: 'modalProps.layerProps.onLayerDidMount',\n        ariaDescribedById: 'modalProps.subtitleAriaId',\n        ariaLabelledById: 'modalProps.titleAriaId',\n      });\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      /* eslint-disable deprecation/deprecation */\n      className,\n      containerClassName,\n      contentClassName,\n      elementToFocusOnDismiss,\n      firstFocusableSelector,\n      forceFocusInsideTrap,\n      styles,\n      hidden,\n      ignoreExternalFocusing,\n      isBlocking,\n      isClickableOutsideFocusTrap,\n      isDarkOverlay,\n      isOpen,\n      onDismiss,\n      onDismissed,\n      onLayerDidMount,\n      responsiveMode,\n      subText,\n      theme,\n      title,\n      topButtonsProps,\n      type,\n      /* eslint-enable deprecation/deprecation */\n      minWidth,\n      maxWidth,\n      modalProps,\n    } = this.props;\n\n    const mergedLayerProps: ILayerProps = {\n      ...(modalProps ? modalProps.layerProps : { onLayerDidMount }),\n    };\n    if (onLayerDidMount && !mergedLayerProps.onLayerDidMount) {\n      mergedLayerProps.onLayerDidMount = onLayerDidMount;\n    }\n\n    let dialogDraggableClassName: string | undefined;\n    let dragOptions: IDragOptions | undefined;\n\n    // if we are draggable, make sure we are using the correct\n    // draggable classname and selectors\n    if (modalProps && modalProps.dragOptions && !modalProps.dragOptions.dragHandleSelector) {\n      dialogDraggableClassName = 'ms-Dialog-draggable-header';\n      dragOptions = {\n        ...modalProps.dragOptions,\n        dragHandleSelector: `.${dialogDraggableClassName}`,\n      };\n    } else {\n      dragOptions = modalProps && modalProps.dragOptions;\n    }\n\n    const mergedModalProps = {\n      ...DefaultModalProps,\n      className,\n      containerClassName,\n      isBlocking,\n      isDarkOverlay,\n      onDismissed,\n      ...modalProps,\n      layerProps: mergedLayerProps,\n      dragOptions,\n    };\n\n    const dialogContentProps: IDialogContentProps = {\n      className: contentClassName,\n      subText,\n      title,\n      topButtonsProps,\n      type,\n      ...DefaultDialogContentProps,\n      ...this.props.dialogContentProps,\n      draggableHeaderClassName: dialogDraggableClassName,\n      titleProps: {\n        // eslint-disable-next-line deprecation/deprecation\n        id: this.props.dialogContentProps?.titleId || this._defaultTitleTextId,\n        ...this.props.dialogContentProps?.titleProps,\n      },\n    };\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className: mergedModalProps.className,\n      containerClassName: mergedModalProps.containerClassName,\n      hidden,\n      dialogDefaultMinWidth: minWidth,\n      dialogDefaultMaxWidth: maxWidth,\n    });\n\n    return (\n      <Modal\n        elementToFocusOnDismiss={elementToFocusOnDismiss}\n        firstFocusableSelector={firstFocusableSelector}\n        forceFocusInsideTrap={forceFocusInsideTrap}\n        ignoreExternalFocusing={ignoreExternalFocusing}\n        isClickableOutsideFocusTrap={isClickableOutsideFocusTrap}\n        responsiveMode={responsiveMode}\n        {...mergedModalProps}\n        isOpen={isOpen !== undefined ? isOpen : !hidden}\n        className={classNames.root}\n        containerClassName={classNames.main}\n        onDismiss={onDismiss ? onDismiss : mergedModalProps.onDismiss}\n        subtitleAriaId={this._getSubTextId()}\n        titleAriaId={this._getTitleTextId()}\n      >\n        <DialogContent\n          subTextId={this._defaultSubTextId}\n          showCloseButton={mergedModalProps.isBlocking}\n          onDismiss={onDismiss}\n          {...dialogContentProps}\n        >\n          {this.props.children}\n        </DialogContent>\n      </Modal>\n    );\n  }\n\n  private _getSubTextId = (): string | undefined => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { ariaDescribedById, modalProps, dialogContentProps, subText } = this.props;\n    let id = (modalProps && modalProps.subtitleAriaId) || ariaDescribedById;\n\n    if (!id) {\n      id = ((dialogContentProps && dialogContentProps.subText) || subText) && this._defaultSubTextId;\n    }\n\n    return id;\n  };\n\n  private _getTitleTextId = (): string | undefined => {\n    // eslint-disable-next-line deprecation/deprecation\n    const { ariaLabelledById, modalProps, dialogContentProps, title } = this.props;\n    let id = (modalProps && modalProps.titleAriaId) || ariaLabelledById;\n\n    if (!id) {\n      id = ((dialogContentProps && dialogContentProps.title) || title) && this._defaultTitleTextId;\n    }\n\n    return id;\n  };\n}\n","import { ScreenWidthMinMedium, getGlobalClassNames } from '../../Styling';\nimport type { IDialogStyleProps, IDialogStyles } from './Dialog.types';\n\nconst GlobalClassNames = {\n  root: 'ms-Dialog',\n};\n\nexport const getStyles = (props: IDialogStyleProps): IDialogStyles => {\n  const {\n    className,\n    containerClassName, // eslint-disable-line deprecation/deprecation\n    dialogDefaultMinWidth = '288px',\n    dialogDefaultMaxWidth = '340px',\n    hidden,\n    theme,\n  } = props;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [classNames.root, theme.fonts.medium, className],\n\n    main: [\n      {\n        width: dialogDefaultMinWidth,\n        outline: '3px solid transparent',\n\n        selectors: {\n          [`@media (min-width: ${ScreenWidthMinMedium}px)`]: {\n            width: 'auto',\n            maxWidth: dialogDefaultMaxWidth,\n            minWidth: dialogDefaultMinWidth,\n          },\n        },\n      },\n      !hidden && { display: 'flex' },\n      containerClassName,\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { DialogBase } from './Dialog.base';\nimport { getStyles } from './Dialog.styles';\nimport type { IDialogProps, IDialogStyleProps, IDialogStyles } from './Dialog.types';\n\nexport const Dialog: React.FunctionComponent<IDialogProps> = styled<IDialogProps, IDialogStyleProps, IDialogStyles>(\n  DialogBase,\n  getStyles,\n  undefined,\n  { scope: 'Dialog' },\n);\nDialog.displayName = 'Dialog';\n","import * as React from 'react';\nimport { DialogContentBase } from './DialogContent.base';\nimport { ResponsiveMode } from '../../ResponsiveMode';\nimport type { IButtonProps } from '../../Button';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\n\n/**\n * {@docCategory Dialog}\n */\nexport interface IDialogContent {}\n\n/**\n * {@docCategory Dialog}\n */\nexport interface IDialogContentProps extends React.ClassAttributes<DialogContentBase> {\n  /**\n   * Optional callback to access the IDialogContent interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IDialogContent>;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules\n   */\n  styles?: IStyleFunctionOrObject<IDialogContentStyleProps, IDialogContentStyles>;\n\n  /**\n   * Theme provided by HOC.\n   */\n  theme?: ITheme;\n\n  /**\n   * Is inside a multiline wrapper\n   */\n  isMultiline?: boolean;\n\n  /**\n   * Show an 'x' close button in the upper-right corner\n   */\n  showCloseButton?: boolean;\n\n  /**\n   * Other top buttons that will show up next to the close button\n   */\n  topButtonsProps?: IButtonProps[];\n\n  /**\n   * Optional override class name\n   */\n  className?: string;\n\n  /**\n   * Callback for when the Dialog is dismissed from the close button or light dismiss, before the animation completes.\n   */\n  onDismiss?: (ev?: React.MouseEvent<HTMLButtonElement>) => any;\n\n  /**\n   * The Id for subText container\n   */\n  subTextId?: string;\n\n  /**\n   * The subtext to display in the dialog\n   */\n  subText?: string;\n\n  /**\n   * The Id for title container\n   *\n   * @deprecated use the `id` attribute in `titleProps` instead.\n   */\n  titleId?: string;\n\n  /**\n   * The title text to display at the top of the dialog.\n   */\n  title?: string | JSX.Element;\n\n  /**\n   * The props for title container.\n   */\n  titleProps?: React.HTMLAttributes<HTMLDivElement>;\n\n  /**\n   * Responsive mode passed in from decorator.\n   */\n  responsiveMode?: ResponsiveMode;\n\n  /**\n   * Label to be passed to to aria-label of close button\n   * @defaultvalue Close\n   */\n  closeButtonAriaLabel?: string;\n\n  /**\n   * The type of Dialog to display.\n   * @defaultvalue DialogType.normal\n   */\n  type?: DialogType;\n\n  /**\n   * The classname for when the header is draggable\n   */\n  draggableHeaderClassName?: string;\n}\n\n/**\n * {@docCategory Dialog}\n */\nexport enum DialogType {\n  /** Standard dialog */\n  normal = 0,\n  /** Dialog with large header banner */\n  largeHeader = 1,\n  /** Dialog with an 'x' close button in the upper-right corner */\n  close = 2,\n}\n\n/**\n * {@docCategory Dialog}\n */\nexport interface IDialogContentStyleProps {\n  /**\n   * Accept theme prop.\n   */\n  theme: ITheme;\n\n  /**\n   * Accept custom classNames\n   */\n  className?: string;\n\n  isLargeHeader?: boolean;\n  isClose?: boolean;\n  hidden?: boolean;\n\n  /**\n   * Is inside a multiline wrapper\n   */\n  isMultiline?: boolean;\n\n  /**\n   * The classname for when the header is draggable\n   */\n  draggableHeaderClassName?: string;\n}\n\n/**\n * {@docCategory Dialog}\n */\nexport interface IDialogContentStyles {\n  /**\n   * Style for the content element.\n   */\n  content: IStyle;\n  subText: IStyle;\n  header: IStyle;\n  button: IStyle;\n  inner: IStyle;\n  innerContent: IStyle;\n  title: IStyle;\n  topButton: IStyle;\n}\n","import * as React from 'react';\nimport { classNamesFunction, initializeComponentRef } from '../../Utilities';\nimport type { IDialogFooterProps, IDialogFooterStyleProps, IDialogFooterStyles } from './DialogFooter.types';\nimport type { IProcessedStyleSet } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IDialogFooterStyleProps, IDialogFooterStyles>();\n\nexport class DialogFooterBase extends React.Component<IDialogFooterProps, {}> {\n  private _classNames: IProcessedStyleSet<IDialogFooterStyles>;\n\n  constructor(props: IDialogFooterProps) {\n    super(props);\n\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element {\n    const { className, styles, theme } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n    });\n\n    return (\n      <div className={this._classNames.actions}>\n        <div className={this._classNames.actionsRight}>{this._renderChildrenAsActions()}</div>\n      </div>\n    );\n  }\n\n  private _renderChildrenAsActions(): (JSX.Element | null)[] | null | undefined {\n    return React.Children.map(this.props.children, child =>\n      child ? <span className={this._classNames.action}>{child}</span> : null,\n    );\n  }\n}\n","import { getGlobalClassNames } from '../../Styling';\nimport type { IDialogFooterStyleProps, IDialogFooterStyles } from './DialogFooter.types';\n\nconst GlobalClassNames = {\n  actions: 'ms-Dialog-actions',\n  action: 'ms-Dialog-action',\n  actionsRight: 'ms-Dialog-actionsRight',\n};\n\nexport const getStyles = (props: IDialogFooterStyleProps): IDialogFooterStyles => {\n  const { className, theme } = props;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    actions: [\n      classNames.actions,\n      {\n        position: 'relative',\n        width: '100%',\n        minHeight: '24px',\n        lineHeight: '24px',\n        margin: '16px 0 0',\n        fontSize: '0',\n\n        selectors: {\n          '.ms-Button': {\n            lineHeight: 'normal',\n          },\n        },\n      },\n      className,\n    ],\n\n    action: [\n      classNames.action,\n      {\n        margin: '0 4px',\n      },\n    ],\n\n    actionsRight: [\n      classNames.actionsRight,\n      {\n        textAlign: 'right',\n        marginRight: '-4px',\n        fontSize: '0',\n      },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { DialogFooterBase } from './DialogFooter.base';\nimport { getStyles } from './DialogFooter.styles';\nimport type { IDialogFooterProps, IDialogFooterStyleProps, IDialogFooterStyles } from './DialogFooter.types';\n\nexport const DialogFooter: React.FunctionComponent<IDialogFooterProps> = styled<\n  IDialogFooterProps,\n  IDialogFooterStyleProps,\n  IDialogFooterStyles\n>(DialogFooterBase, getStyles, undefined, { scope: 'DialogFooter' });\n"],"names":["useBoolean","initialState","value","setValue","setTrue","setFalse","toggle","currentValue","animationDuration","globalClassNames","root","main","scrollableContent","isOpen","layer","getClassNames","className","isDragging","touchAction","selectors","userSelect","eventMapping","start","move","stop","props","_currentEventType","_events","_onMouseDown","event","onMouseDown","children","_onDragStart","_onMouseUp","onMouseUp","_onDragStop","_onTouchStart","onTouchStart","_onTouchEnd","onTouchEnd","button","handleSelector","_matchesSelector","target","preventDragSelector","_touchId","_getTouchId","position","_getControlPosition","undefined","dragData","_createDragDataFromPosition","onStart","setState","lastPosition","on","document","body","_onDrag","type","preventDefault","updatedData","_createUpdatedDragData","updatedPosition","onDragChange","state","baseDragData","onStop","forEach","dispose","x","y","componentDidUpdate","prevProps","this","componentWillUnmount","render","child","statePosition","style","transform","touchObj","_getActiveTouch","eventToGetOffset","clientX","clientY","targetTouches","_findTouchInTouchList","changedTouches","touch","identifier","element","selector","matchesSelectorFn","matches","webkitMatchesSelector","msMatchesSelector","call","parentElement","touchList","i","length","delta","ZERO","DEFAULT_PROPS","isDarkOverlay","containerClassName","classNamesFunction","ModalBase","propsWithoutDefaults","ref","getPropsWithDefaults","allowTouchBodyScroll","scrollableContentClassName","elementToFocusOnDismiss","firstFocusableSelector","forceFocusInsideTrap","ignoreExternalFocusing","isBlocking","isAlert","isClickableOutsideFocusTrap","onDismiss","layerProps","overlay","titleAriaId","styles","subtitleAriaId","theme","topOffsetFixed","responsiveMode","onLayerDidMount","isModeless","dragOptions","onDismissed","enableAriaHiddenSiblings","rootRef","focusTrapZone","focusTrapZoneElm","mergedRef","useMergedRefs","modalResponsiveMode","useResponsiveMode","focusTrapZoneId","useId","win","useSetTimeout","setTimeout","clearTimeout","isModalOpen","setIsModalOpen","isVisible","setIsVisible","coordinates","setCoordinates","modalRectangleTop","setModalRectangleTop","isModalMenuOpen","toggleModalMenuOpen","setModalMenuClose","internalState","useConst","onModalCloseTimer","lastSetCoordinates","events","EventGroup","keepInBounds","isAlertRole","layerClassName","classNames","hasBeenOpened","windowInnerHeight","innerHeight","isDefaultDragHandle","dragHandleSelector","mergedLayerProps","eventBubblingEnabled","insertFirst","allowScrollOnModal","elt","off","registerInitialModalPosition","dialogMain","current","modalRectangle","getBoundingClientRect","top","minPosition","left","maxPosition","getClampedAxis","axis","Math","max","min","handleModalClose","isInKeyboardMoveMode","disposeOnKeyUp","handleDragStart","handleDrag","ev","prevValue","handleDragStop","focus","requestAnimationFrame","handleKeyUp","altKey","ctrlKey","keyCode","KeyCodes","elementContains","stopPropagation","registerForKeyUp","parseFloat","callback","unmountRef","useUnmount","componentRef","useComponentRef","modalContent","FocusTrapZone","id","focusPreviouslyFocusedInnerElement","onBlur","disposeOnKeyDown","keyboardMoveIconContainer","keyboardMoveIconProps","Icon","iconName","keyboardMoveIcon","menu","items","key","text","moveMenuItemText","onClick","handleKeyDown","handledEvent","shiftKey","getMoveDelta","closeMenuItemText","alignTargetEdge","coverTarget","directionalHint","DirectionalHint","directionalHintFixed","shouldFocusOnMount","Layer","Popup","role","ariaLabelledBy","ariaDescribedBy","shouldRestoreFocus","Overlay","isDarkThemed","DraggableZone","displayName","Modal","styled","palette","effects","fonts","medium","backgroundColor","height","width","display","alignItems","justifyContent","opacity","pointerEvents","transition","boxShadow","elevation64","borderRadius","roundedCorner2","white","boxSizing","textAlign","outline","maxHeight","maxWidth","minHeight","minWidth","overflowY","zIndex","cursor","flexGrow","padding","fontSize","xLargePlus","scope","fields","DialogFooterType","DialogFooter","initializeComponentRef","warnDeprecations","titleId","subTextContent","showCloseButton","closeButtonAriaLabel","subTextId","subText","titleProps","title","draggableHeaderClassName","isLargeHeader","isClose","groupings","_groupChildren","content","header","css","topButton","topButtonsProps","map","index","IconButton","uniqueId","iconProps","ariaLabel","inner","innerContent","contents","footers","push","defaultProps","DialogContentBase","withResponsiveMode","GlobalClassNames","contentLgHeader","close","headerLg","DialogContent","hidden","isMultiline","semanticColors","borderTop","themePrimary","margin","color","bodySubtext","lineHeight","wordWrap","fontWeight","buttonText","xLarge","bodyText","menuHeader","xxLarge","flexDirection","flexWrap","right","flex","buttonTextHovered","DefaultModalProps","DefaultDialogContentProps","_getSubTextId","ariaDescribedById","modalProps","dialogContentProps","_defaultSubTextId","_getTitleTextId","ariaLabelledById","_defaultTitleTextId","_id","getId","dialogDraggableClassName","contentClassName","mergedModalProps","dialogDefaultMinWidth","dialogDefaultMaxWidth","DialogBase","Dialog","DialogType","_classNames","actions","actionsRight","_renderChildrenAsActions","action","DialogFooterBase","marginRight"],"sourceRoot":""}