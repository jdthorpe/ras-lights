{"version":3,"file":"static/js/199.ace9f30f.chunk.js","mappings":"uNAKMA,EAA2C,CAC7CC,SAAU,CAAEC,MAAO,MA2FvB,UAxFwB,WAGpB,OAAmCC,EAAAA,EAAAA,UAA4B,IAA/D,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAqCF,EAAAA,EAAAA,YAArC,eAAOG,EAAP,KAAmBC,EAAnB,KAEA,GAAuCJ,EAAAA,EAAAA,YAAvC,eAAOK,EAAP,KAAoBC,EAApB,KAEA,GAAyBN,EAAAA,EAAAA,YAAzB,eAAOO,EAAP,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAU,WACN,IAAIC,GAAW,EA8Cf,OA7CA,iBAAC,yGAC8B,qBAAhBL,EADd,iCAE8BM,MAAM,wBAAyB,CAClDC,OAAQ,MACRC,MAAO,aAJlB,UAEaC,EAFb,QAMWJ,EANX,iEAO8BC,MAAM,wBAPpC,UAOaI,EAPb,QAQWL,EARX,8EAW8BK,EAASC,OAXvC,WAWiBT,EAXjB,QAYeG,EAZf,oEAawCI,EAASE,OAbjD,WAaiBC,EAbjB,QAceP,EAdf,mDAkBW,GAHAJ,EAAgBW,GACVC,EAAwBD,EAAOE,KAAI,SAAAC,GAAC,MAAK,CAAEC,IAAKD,EAAEE,KAAMC,KAAMH,EAAEE,SACtEpB,EAAcgB,GACW,kBAAdX,EAAKA,KAEZ,IADMiB,EAAOP,EAAOQ,WAAU,SAAAL,GAAC,OAAIA,EAAEE,OAASf,EAAKA,UACvC,EAAG,CAEX,IADMmB,GADK,UACaT,EAAOO,KACtBG,GAEL,IADAD,EAAKC,IAAL,OAAcD,EAAKC,IADV,aAEJ,sBAAKN,EAAL,KAAUO,EAAV,KACGC,EAAIH,EAAKC,GAAGF,WAAU,SAAAK,GAAC,OAAIA,EAAET,MAAQA,UACxBU,WAANF,IAEPH,EAAKC,GAAGE,IAAR,kBAAkBH,EAAKC,GAAGE,IAA1B,IAA8B,QAAWD,MAJjD,MAAyBI,OAAOC,QAAQ1B,EAAK2B,SAA7C,eAAwD,IAO5D1B,EAASkB,GACTtB,EAAec,EAAGM,GAAMH,UAExBc,QAAQC,IAAR,uBAA4B7B,EAAKA,OAlCpD,mDAwCW4B,QAAQC,IAAR,0DACAD,QAAQC,IAAI,gGAzCvB,0DAAD,GA6CO,WAAQ1B,GAAW,KAC3B,CAACL,EAAaC,IAGjB,IAAM+B,GAAKC,EAAAA,EAAAA,aAAW,mCAAC,WAAOC,EAAwCC,EAA0BC,GAAzE,iEACfpC,GAAemC,GAA2B,kBAAVC,IAChC9B,MAAM,wBAAD,OAAyB6B,EAAOnB,MAErCb,EAASH,EAAYoC,IACrBrC,EAAeoC,EAAOnB,MALP,2CAAD,0DAOnB,CAAChB,IAEJ,OACI,iBAAKqC,MAAO,CAAEC,OAAQ,UAAtB,WACI,SAAC,IAAD,CACIC,YAAY,sBACZC,MAAM,aACNC,YAAa3C,EACb4C,QAAS9C,EACT+C,OAAQnD,EACRoD,SAAUZ,IAEb9B,GAAQA,EAAKoB,KACV,SAAC,EAAAuB,GAAD,CAAIvB,GAAIpB,EAAKoB","sources":["modes.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { Dropdown, IDropdownStyles, IDropdownOption } from '@fluentui/react/lib/Dropdown';\nimport { UI } from './ui';\nimport { show } from \"shared/types/mode\";\n\nconst dropdownStyles: Partial<IDropdownStyles> = {\n    dropdown: { width: 300 },\n};\n\nconst Modes: React.FC = () => {\n\n    // dropdown sate\n    const [item_list, set_item_list] = useState<IDropdownOption[]>([]);\n    const [active_key, set_active_key] = useState<string>();\n    // available modes\n    const [mode_config, set_mode_config] = useState<show[]>();\n    // active mode\n    const [mode, set_mode] = useState<show>();\n\n    useEffect(() => {\n        let canceled = false;\n        (async () => {\n            if (typeof mode_config === \"undefined\") {\n                const response = await fetch(\"/ras-lights/api/mode/\", {\n                    method: 'GET', // *GET, POST, PUT, DELETE, etc.\n                    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                });\n                if (canceled) return\n                const mode_res = await fetch(\"/ras-lights/api/ctl/\")\n                if (canceled) return\n\n                try {\n                    const mode = await mode_res.json()\n                    if (canceled) return\n                    const config: show[] = await response.json();\n                    if (canceled) return\n                    set_mode_config(config)\n                    const il: IDropdownOption[] = config.map(x => ({ key: x.name, text: x.name }))\n                    set_item_list(il)\n                    if (typeof mode.mode === \"string\") {\n                        const indx = config.findIndex(x => x.name === mode.mode)\n                        if (indx >= 0) {\n                            const conf: show = { ...config[indx] }\n                            if (conf.ui) {\n                                conf.ui = [...conf.ui]\n                                for (let [key, value] of Object.entries(mode.updates)) {\n                                    let i = conf.ui.findIndex(u => u.key === key)\n                                    if (typeof i !== undefined)\n                                        // @ts-ignore\n                                        conf.ui[i] = { ...conf.ui[i], \"default\": value }\n                                }\n                            }\n                            set_mode(conf)\n                            set_active_key(il[indx].key as string)\n                        } else {\n                            console.log(`unknown mode ${mode.mode}`)\n\n                        }\n                    }\n\n                } catch (err) {\n                    console.log(`fetch(\"/ras-lights/api/mode/\").json() failed with`, err)\n                    console.log(\"This usually means the app is running on a dev box without beign proxied via /nginx-dev.conf\")\n                }\n            }\n        })()\n        return () => { canceled = true }\n    }, [mode_config, set_mode_config])\n\n\n    const cb = useCallback(async (event: React.FormEvent<HTMLDivElement>, option?: IDropdownOption, index?: number) => {\n        if (mode_config && option && typeof index === \"number\") {\n            fetch(`/ras-lights/api/mode/${option.key}`)\n            // set_mode_number(index)\n            set_mode(mode_config[index])\n            set_active_key(option.key as string)\n        }\n    }, [mode_config])\n\n    return (\n        <div style={{ margin: \"1.5rem\" }}>\n            <Dropdown\n                placeholder=\"Select a Light Mode\"\n                label=\"Light Mode\"\n                selectedKey={active_key}\n                options={item_list}\n                styles={dropdownStyles}\n                onChange={cb} />\n\n            {mode && mode.ui && (\n                <UI ui={mode.ui} />\n            )}\n            {/* <pre>{typeof i !== \"undefined\" ? JSON.stringify(mode_config[i].ui, null, 2) : null}</pre> */}\n        </div>\n    );\n};\n\nexport default Modes\n"],"names":["dropdownStyles","dropdown","width","useState","item_list","set_item_list","active_key","set_active_key","mode_config","set_mode_config","mode","set_mode","useEffect","canceled","fetch","method","cache","response","mode_res","json","config","il","map","x","key","name","text","indx","findIndex","conf","ui","value","i","u","undefined","Object","entries","updates","console","log","cb","useCallback","event","option","index","style","margin","placeholder","label","selectedKey","options","styles","onChange","UI"],"sourceRoot":""}