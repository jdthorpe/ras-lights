{"version":3,"file":"static/js/469.fc1195d3.chunk.js","mappings":"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","sources":["manual.tsx"],"sourcesContent":["import React, { useState } from \"react\"\nimport { PrimaryButton } from '@fluentui/react/lib/Button';\nimport { Slider } from '@fluentui/react/lib/Slider';\nimport { rgbw } from \"shared/types/mode\";\nimport debounce from \"lodash.debounce\"\nimport {\n    ColorPicker,\n    IColorPickerStyles,\n} from '@fluentui/react/lib/ColorPicker';\nimport { IColor } from \"@fluentui/react/lib/Color\"\nimport { getColorFromString } from \"@fluentui/react/lib/utilities/color\";\n\n\nimport styled from \"styled-components\"\n\nconst Col = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n`\nconst Row = styled.div`\n    display: flex;\n    flex-direction: row;\n    gap: 1rem;\n`\n\nasync function turnOff() {\n    try {\n        // await fetch(\"/ras-lights/api/mode/off\")\n        await smooth_to([0, 0, 0, 0], 500)\n    } catch (err) {\n        console.log(\"/lights/off failed with error\", err)\n    }\n}\n\nasync function setRandomColors(on: boolean) {\n    try {\n        if (on)\n            await fetch(\"/ras-lights/api/mode/off\")\n        await fetch(\"/ras-lights/api/lights/random\")\n    } catch (err) {\n        console.log(\"/lights/random failed with error\", err)\n    }\n}\n\n/*\n{\"name\":\"editor\",\"def\":{\"type\":\"func\",\"name\":\"SmoothTo\",\"params\":{\"to\":{\"type\":\"rgbw\",\"value\":[0,0,255,127]},\"fade_time\":{\"type\":\"number\",\"value\":500}}}}\n\n*/\n\nasync function smooth_to(x: rgbw, t: number = 300) {\n    await fetch(\"/ras-lights/api/mode\", {\n        method: 'POST',\n        cache: 'no-cache',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n            \"name\": \"editor\",\n            \"def\": {\n                \"type\": \"func\",\n                \"name\": \"SmoothTo\",\n                \"params\": {\n                    \"to\": {\n                        \"type\": \"rgbw\",\n                        \"value\": x\n                    },\n                    \"fade_time\": { \"type\": \"number\", \"value\": t } // TODO: magic number\n                }\n            }\n        })\n    })\n}\n\n\n\nasync function setWhiteIntensity(intensity: number) {\n    try {\n        await smooth_to([0, 0, 0, intensity])\n    } catch (err) {\n        console.log(\"/lights/white failed with error\", err)\n    }\n}\n\n/*\nasync function setWhiteIntensity(on: boolean, intensity: number) {\n    try {\n        if (on)\n            await fetch(\"/ras-lights/api/mode/off\")\n        await fetch(`/api/lights/white/${intensity}`)\n    } catch (err) {\n        console.log(\"/lights/white failed with error\", err)\n    }\n}\n*/\n\nasync function update_color(x: IColor) {\n    try {\n        await smooth_to([x.r, x.g, x.b, 0])\n    } catch (err) {\n        console.log(\"/lights/set-colors failed with error\", err)\n    }\n}\n\n/*\nasync function update_color(x: IColor, on: boolean) {\n    try {\n        if (on)\n            await fetch(\"/ras-lights/api/mode/off\")\n        await fetch(\"/ras-lights/api/lights/set-colors\", {\n            method: 'POST',\n            cache: 'no-cache',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify([[x.r, x.g, x.b]])\n        });\n    } catch (err) {\n        console.log(\"/lights/set-colors failed with error\", err)\n    }\n}\n*/\n\nconst Manual: React.FC = () => {\n    const [color, setColor] = useState(white);\n    const [on, set_on] = useState(true)\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const updateColor = React.useCallback(debounce((ev: any, colorObj: IColor) => {\n        set_on(false)\n        setColor(colorObj)\n        update_color(colorObj)\n    }, 25), [setColor, update_color, set_on, on]);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const set_random = React.useCallback(debounce(() => {\n        set_on(false)\n        setRandomColors(on)\n    }, 25), [on, set_on]);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const slider_cb = React.useCallback(debounce((n: number) => {\n        set_on(false)\n        setWhiteIntensity(n)\n        // setWhiteIntensity(on, n)\n    }, 25), [on, set_on]);\n\n    return (\n        <div style={{ margin: \"1.5rem\" }}>\n            <Col>\n                <Row>\n                    <PrimaryButton onClick={set_random} text=\"Random Colors\" />\n                    <PrimaryButton onClick={turnOff} text=\"Off\" />\n                </Row>\n                <Row>\n                    <div style={{ width: \"400px\" }}>\n                        <Slider\n                            label=\"White Lights Only\"\n                            min={10} max={255}\n                            defaultValue={255}\n                            onChange={slider_cb} />\n                    </div>\n                </Row>\n            </Col>\n            <h3>Click to pick a single color</h3>\n            <ColorPicker\n                color={color}\n                onChange={updateColor}\n                alphaType=\"none\"\n                showPreview={true}\n                styles={colorPickerStyles}\n                // The ColorPicker provides default English strings for visible text.\n                // If your app is localized, you MUST provide the `strings` prop with localized strings.\n                strings={{\n                    // By default, the sliders will use the text field labels as their aria labels.\n                    // Previously this example had more detailed instructions in the labels, but this is\n                    // a bad practice and not recommended. Labels should be concise, and match visible text when possible.\n                    hueAriaLabel: 'Hue',\n                }}\n            />\n        </div>\n    )\n\n}\n\nconst white = getColorFromString('#ffffff')!;\n\nconst colorPickerStyles: Partial<IColorPickerStyles> = {\n    panel: { padding: 12 },\n    root: {\n        maxWidth: 352,\n        minWidth: 352,\n    },\n    colorRectangle: { height: 268 },\n};\n\nexport default Manual"],"names":["Col","styled","Row","turnOff","smooth_to","console","log","on","fetch","x","t","method","cache","headers","body","JSON","stringify","intensity","update_color","r","g","b","white","getColorFromString","colorPickerStyles","panel","padding","root","maxWidth","minWidth","colorRectangle","height","useState","color","setColor","set_on","updateColor","React","debounce","ev","colorObj","set_random","setRandomColors","slider_cb","n","setWhiteIntensity","style","margin","onClick","text","width","label","min","max","defaultValue","onChange","alphaType","showPreview","styles","strings","hueAriaLabel"],"sourceRoot":""}