{"version":3,"file":"static/js/318.3ba1f4a6.chunk.js","mappings":"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","sources":["schedule/schedule-editor.tsx","schedule/schedule.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport styled from \"styled-components\"\nimport Cron, { CronError } from \"react-js-cron\"\nimport { TextField, ITextFieldStyles } from '@fluentui/react/lib/TextField';\nimport { Dropdown, IDropdownOption, IDropdownStyles } from '@fluentui/react/lib/Dropdown';\nimport { PrimaryButton } from '@fluentui/react/lib/Button';\nimport { ISchedule } from 'shared/types/schedule';\nimport cronstrue from 'cronstrue';\n\n// import 'antd/dist/antd.min.css'; // required by cron\n\nconst Row = styled.div`\n    display: flex;\n    flex-directio: row;\n    gap: 1rem;\n    align-items: flex-end;\n    margin: 0 1rem .6rem 1rem;\n`\n\nconst textboxStyle: Partial<ITextFieldStyles> = { fieldGroup: { width: \"15rem\" } };\nconst dropdownStyles: Partial<IDropdownStyles> = {\n    dropdown: { width: \"10rem\" },\n};\n\nconst defaultValue = '* * * * *'\n\ninterface EditScheduleProps {\n    modes: string[];\n    schedule?: ISchedule;\n    save: (s: ISchedule) => void;\n}\nconst EditSchedule: React.FC<EditScheduleProps> = ({ modes, schedule, save }) => {\n\n    const [_schedule, set_schedule] = useState(schedule)\n\n    const [cronString, setCronString] = useState<string>(schedule?.schedule || defaultValue);\n    const [cronError, setCronError] = useState<CronError>();\n    const [name, setName] = useState<string | undefined>(schedule?.name || \"\");\n    const [mode, setMode] = useState<string | undefined>(schedule?.mode);\n\n    if (typeof schedule !== \"undefined\" && !Object.is(_schedule, schedule)) {\n        // respond to the outside world\n        set_schedule(schedule)\n        setMode(schedule.mode)\n        setName(schedule.name)\n        setCronString(schedule?.schedule)\n        setCronError(undefined)\n    }\n\n    const disabled = (\n        typeof mode === \"undefined\" ||\n        typeof name === \"undefined\" ||\n        typeof cronString === \"undefined\" ||\n        typeof cronError !== \"undefined\" ||\n        mode.length === 0 ||\n        name.length === 0 ||\n        cronString.length === 0 ||\n        cronString === defaultValue\n    )\n\n    return (\n        <div\n            style={{\n                backgroundColor: \"#dddddd\",\n            }}\n        >\n\n            <div\n                style={{\n                    width: \"max-content\",\n                    paddingTop: \".5rem\",\n                }}\n            >\n                <Row>\n                    <TextField\n                        label=\"Schedule Name\"\n                        value={name}\n                        onChange={(event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string | undefined) => setName(newValue)}\n                        styles={textboxStyle}\n                    />\n                    <Dropdown\n                        label=\"Mode\"\n                        selectedKey={mode}\n                        onChange={(event: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<any>, index?: number | undefined) => option && setMode(option.key as string)}\n                        placeholder=\"Select mode\"\n                        options={modes.sort().map(s => ({ key: s, text: s }))}\n                        styles={dropdownStyles}\n                    />\n                    <PrimaryButton\n                        style={{ marginLeft: \"auto\" }}\n                        onClick={() => save({ name: name!, mode: mode!, schedule: cronString })}\n                        disabled={disabled}\n                    >Save</PrimaryButton>\n                </Row>\n                <Row>\n                    <Cron value={cronString} setValue={setCronString} onError={setCronError} />\n                </Row>\n                <Row>\n                    <p>{cronstrue.toString(cronString)} </p>\n                </Row>\n            </div>\n        </div>\n    )\n}\n\n\n\nexport default EditSchedule","import React, { useState, useEffect } from 'react';\nimport Editor from \"./schedule-editor\"\nimport cronstrue from 'cronstrue';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrashAlt, faEdit, faLock } from '@fortawesome/free-solid-svg-icons'\nimport { Spinner, SpinnerSize } from '@fluentui/react/lib/Spinner';\nimport { ISchedule } from 'shared/types/schedule';\nimport \"./antd.css\"\n\nconst Table = styled.table`\n    border-collapse: collapse;\n    tr:nth-child(even) {background: #DDD};\n    tr:nth-child(odd) {background: #FFF};\n    margin: 1rem;\n    max-width: 800px;\n`\n\nconst Th = styled.th`\n    border: 1px solid #999;\n    padding: 0.5rem;\n    text-align: left;\n`\n\nconst Td = styled.td`\n    border: 1px solid #999;\n    padding: 0.5rem;\n    text-align: left;\n`\n\n\ninterface IReadableSchedule extends ISchedule {\n    human: string\n}\n\nconst Schedule: React.FC = () => {\n\n    const [schedules, set_schedules] = useState<IReadableSchedule[]>()\n    const [modes, set_modes] = useState<string[]>()\n    const [saveError, set_save_error] = useState<string>()\n    const [current_schedule, set_current_schedule] = useState<ISchedule | undefined>()\n\n    const deleteSchedule = (i: number) => {\n        if (typeof schedules === \"undefined\")\n            return\n        (async () => {\n            const results = await fetch(\"/ras-lights/api/schedule/\", {\n                method: 'DELETE',\n                cache: 'no-cache',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ name: schedules[i].name })\n            });\n            if (results.status !== 200) {\n                set_save_error(await results.text())\n            }\n            await fetchSchedules()\n        })()\n    }\n\n    const editSchedule = (i: number) => {\n        if (typeof schedules === \"undefined\")\n            return\n        set_current_schedule(schedules[i])\n    }\n\n    const saveSchedule = async (s: ISchedule) => {\n        set_current_schedule(s)\n        const results = await fetch(\"/ras-lights/api/schedule/\", {\n            method: 'POST',\n            cache: 'no-cache',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(s)\n        });\n        if (results.status !== 200) {\n            set_save_error(await results.text())\n        }\n        await fetchSchedules()\n    }\n\n    const fetchSchedules = async () => {\n        const results = await fetch(\"/ras-lights/api/schedule/\")\n        const _schedules: IReadableSchedule[] = await results.json()\n        _schedules.forEach(s => { s.human = cronstrue.toString(s.schedule) })\n        set_schedules(_schedules.sort((a, b) => (a.name < b.name) ? -1 : 1))\n    }\n\n    useEffect(() => {\n        if (typeof schedules === \"undefined\")\n            fetchSchedules()\n    }, [schedules])\n\n    useEffect(() => {\n        if (typeof modes !== \"undefined\") return\n        let canceled = false;\n        (async () => {\n            const response = await fetch(\"/ras-lights/api/mode/\");\n            try {\n                const config: any = await response.json();\n                if (canceled) return\n                set_modes([\"off\", ...config.map((x: any) => x.name)])\n            } catch (err) {\n                console.log(`fetch(\"/ras-lights/api/mode/\").json() failed with`, err)\n                console.log(\"This usually means the app is running on a dev box without beign proxied via /nginx-dev.conf\")\n            }\n        })()\n        return () => { canceled = true }\n    }, [modes])\n\n    if (typeof schedules === \"undefined\")\n        return (<div style={{ paddingTop: \"2rem\" }}><Spinner label=\"I am definitely loading...\" size={SpinnerSize.large} /></div>)\n\n    return (\n        <div>\n            <Editor\n                modes={modes || []}\n                schedule={current_schedule}\n                save={saveSchedule}\n            />\n            {saveError && <p style={{ color: \"red\" }}>Somethig went wrong while saving: {saveError}</p>}\n\n            <Table>\n                <colgroup>\n                    <col style={{ minWidth: \"11rem\" }} />\n                    <col style={{ minWidth: \"11rem\" }} />\n                    <col style={{ width: \"100%\" }} />\n                </colgroup>\n                <thead>\n                    <tr>\n                        <Th>Name</Th>\n                        <Th>Mode</Th>\n                        <Th>Schedule</Th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {schedules.map((s, i) => (\n                        <tr key={i}>\n                            <Td>{s.name}</Td>\n                            <Td>{s.mode}</Td>\n                            <Td>{s.human}<span style={{ float: \"right\" }}>\n                                <FontAwesomeIcon\n                                    style={{ margin: \"0 7px\" }}\n                                    icon={faTrashAlt}\n                                    title=\"Delete\"\n                                    onClick={() => deleteSchedule(i)}\n                                />\n                                <FontAwesomeIcon\n                                    style={{ margin: \"0 7px\" }}\n                                    icon={faEdit}\n                                    title=\"Edit\"\n                                    onClick={() => editSchedule(i)}\n                                />\n                                <FontAwesomeIcon\n                                    style={{ margin: \"0 7px\" }}\n                                    title=\"something\"\n                                    icon={faLock}\n                                />\n                            </span></Td>\n                        </tr>\n                    ))}\n                </tbody>\n\n            </Table>\n\n\n        </div>\n    )\n}\n\n\nexport default Schedule"],"names":["Row","styled","textboxStyle","fieldGroup","width","dropdownStyles","dropdown","defaultValue","modes","schedule","save","useState","_schedule","set_schedule","cronString","setCronString","cronError","setCronError","name","setName","mode","setMode","Object","is","undefined","disabled","length","style","backgroundColor","paddingTop","TextField","label","value","onChange","event","newValue","styles","Dropdown","selectedKey","option","index","key","placeholder","options","sort","map","s","text","PrimaryButton","marginLeft","onClick","setValue","onError","cronstrue","Table","Th","Td","schedules","set_schedules","set_modes","saveError","set_save_error","current_schedule","set_current_schedule","saveSchedule","fetch","method","cache","headers","body","JSON","stringify","results","status","fetchSchedules","json","_schedules","forEach","human","a","b","useEffect","canceled","response","config","x","console","log","Spinner","size","SpinnerSize","color","minWidth","i","float","margin","icon","faTrashAlt","title","deleteSchedule","faEdit","editSchedule","faLock"],"sourceRoot":""}