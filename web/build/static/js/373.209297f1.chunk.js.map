{"version":3,"file":"static/js/373.209297f1.chunk.js","mappings":"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","sources":["template/template.ts","template/input.tsx","template/valuePicker.tsx","template/index.tsx"],"sourcesContent":["import { value, input } from \"shared/types/parameters\";\n\ntype _builder = (args: templateParams) => string;\n\nfunction templateBuilder(args: templateParams): string {\n    const builder = (strings: TemplateStringsArray, ...values: _builder[]) => {\n        let str = \"\";\n        strings.forEach((string, i) => {\n            let bldr = values[i];\n            str += string + (typeof bldr === \"undefined\" ? \"\" : bldr(args));\n        });\n        return str;\n    };\n\n    return builder`import { register } from \"../register\";\n${interfaces}\nfunction effect(this: any, input: input, globals: globals): ${output_type} {\n    ${imports}// Your code goes here...\n}\n\nregister({\n    /* Effect Name */\n    name: \"${(args: templateParams) => args.effectName}\",\n    /* Effect Function */\n    func: effect,\n    /* Effect Inputs */\n    input: ${inputs},\n    /* Effect Output Type */\n    output: \"${output_type}\"\n});\n`;\n}\n\n// now in the global.d.ts file:\n// import { globals } from \"../../types\";\n// ${usedValueTypes}\n\ninterface templateParams {\n    effectName: string;\n    inputs: input[];\n    output_type: value;\n}\n\nfunction output_type(args: templateParams): string {\n    return args.output_type;\n}\n\nfunction interfaces(args: templateParams): string {\n    if (args.inputs.length)\n        return `\ninterface input {\n${args.inputs\n    .map((i) => `    ${i.key}: ${i.type};\\n`)\n    .reduce((a, b) => `${a}${b}`, \"\")}}\n`;\n    return `\ninterface input {}\n`;\n}\n\nfunction _input(i: input): string {\n    let out: string = `            key: \"${i.key}\",\n            type: \"${i.type}\",\n            label: \"${i.label}\",\n            default: ${JSON.stringify(i.default)},`;\n    if (i.type === \"number\" || i.type === \"integer\")\n        out += `\n            min: ${i.min},\n            max: ${i.max},`;\n\n    return `        {\n${out}\n        },`;\n}\n\nfunction imports(args: templateParams): string {\n    if (args.inputs.length) {\n        const inputs =\n            args.inputs.length === 1\n                ? args.inputs[0].key\n                : args.inputs.map((i) => i.key).reduce((a, b) => `${a}, ${b}`);\n        return `const { ${inputs} } = inputs;\\n    `;\n    }\n    return \"\";\n}\n\nfunction inputs(args: templateParams): string {\n    if (!args.inputs.length) return \"[]\";\n    const out = args.inputs.map(_input).reduce((a, b) => `${a}\\n${b}`, \"\");\n    return `[${out}\n    ]`;\n}\n\n// function usedValueTypes(args: templateParams): string {\n//     const types = new Set<string>();\n//     switch (args.output_type) {\n//         case \"rgb\":\n//         case \"rgb[]\":\n//             types.add(\"rgb\");\n//             break;\n//         case \"rgbw[]\":\n//             types.add(\"rgbw\");\n//             break;\n//     }\n//     for (let i of args.inputs) {\n//         switch (i.type) {\n//             case \"rgb\":\n//             case \"rgb[]\":\n//                 types.add(\"rgb\");\n//                 break;\n//         }\n//     }\n//     if (!types.size) return \"\";\n//     const type_imports = Array.from(types.values()).reduce(\n//         (a, b) => `${a}, ${b}`\n//     );\n//     return `import { ${type_imports} } from \"shared/types/mode\";\\n`;\n// }\n\nexport default templateBuilder;\n","import React, { useState, useEffect, useCallback, useRef } from \"react\"\nimport styled from \"styled-components\"\nimport { Dropdown, IDropdownOption } from '@fluentui/react/lib/Dropdown';\nimport { TextField, ITextFieldStyles } from '@fluentui/react/lib/TextField';\nimport { Label } from '@fluentui/react/lib/Label';\nimport { Toggle } from '@fluentui/react/lib/Toggle';\nimport { rgb, rgbw } from \"shared/types/mode\"\nimport { value, input } from 'shared/types/parameters';\nimport { Color, ColorArray } from \"../editor/inputs/color-input\";\nimport { is_int, is_number } from \"../editor/inputs/number-input\";\nimport { IconButton } from \"../utils/icon-button\";\nimport { check } from \"reserved-words\";\n\nimport { faTimes, faChevronUp, faChevronDown } from '@fortawesome/free-solid-svg-icons'\n\nconst VALUE_LABELS: Record<value, string> = {\n    \"button\": \"Button\",\n    \"boolean\": \"Boolean\",\n    \"integer\": \"Integer\",\n    \"number\": \"Number\",\n    \"rgb\": \"Color\",\n    \"rgbw\": \"RGB+W\",\n    \"rgb[]\": \"Color Array\",\n    \"rgbw[]\": \"RGB+W Array\",\n    \"number[]\": \"W Array\",\n}\nconst VALUE_TYPES: value[] = Object.keys(VALUE_LABELS) as value[]\nconst VALUE_ITEMS = VALUE_TYPES.map(t => ({ key: t, text: VALUE_LABELS[t] }))\n\nconst descriptionTextBoxstyle: Partial<ITextFieldStyles> = { fieldGroup: { width: \"10rem\" } };\nconst keyTextBoxstyle: Partial<ITextFieldStyles> = { fieldGroup: { width: \"6rem\" } };\nconst numberTextBoxstyle: Partial<ITextFieldStyles> = { fieldGroup: { width: \"3rem\" } };\n\nconst Row = styled.div`\n    display: flex;\n    flex-direction: row;\n    gap: 10px;\n    padding: 0 10px 10px 10px;\n`\n\nconst is_js_identifier = /^[$_a-zA-Z][$_a-zA-Z0-9]*$/;\n\ninterface cb {\n    onChange: (x: input) => void;\n    onRemove: () => void;\n    onActivate?: () => void;\n    onUp?: () => void;\n    onDown?: () => void;\n}\ninterface props extends cb {\n    input: input;// | undefined;\n}\n\nconst InputPicker: React.FC<props> = ({ input, onChange, onRemove, onActivate, onUp, onDown }) => {\n\n    const [_input, set_input] = useState<input | undefined>(input);\n\n    const [type, set_value_type] = useState<value | \"button\">(input ? input.type : \"rgb\");\n    const [key, set_key] = useState<string>(input ? input.key : \"\");\n    const [key_error, set_key_error] = useState<string | undefined>(\"\");\n    const [label, set_label] = useState<string>(input ? input.label : \"\");\n\n    // DEFAULT VALUES\n    const [bool, set_bool] = useState<boolean>(false);\n    const [color, set_color] = useState<rgb>((input && input.type === \"rgb\") ? input.default : [0, 0, 255]);\n    const [color_array, set_color_array] = useState<rgb[]>([[0, 0, 255], [0, 255, 255], [100, 0, 255],]);\n    // const [rgbw, set_rgbw] = useState<rgbw>([0, 0, 255, 127]);\n    // const [rgbw_array, set_rgbw_array] = useState<rgbw[]>([[0, 0, 255, 0], [0, 255, 255, 127], [100, 0, 255, 255],]);\n    // const [w_array, set_w_array] = useState<number[]>([0, 63, 127, 191, 255]);\n    const [button_label, set_button_label] = useState<string>(\"My Button\");\n    const [number, set_number] = useState<string>(\"5\");\n    const [min, set_min] = useState<string>(\"1\");\n    const [max, set_max] = useState<string>(\"10\");\n    // since there aren't pickers for these, we don't need setters\n    const rgbw: rgbw = [0, 0, 255, 127];\n    const rgbw_array: rgbw[] = [[0, 0, 255, 0], [0, 255, 255, 127], [100, 0, 255, 255],];\n    const w_array: number[] = [0, 63, 127, 191, 255];\n\n    const cb = useRef<cb>({ onChange, onRemove, onActivate, onUp, onDown })\n    cb.current = { onChange, onRemove, onActivate, onUp, onDown }\n\n    // useEffect(() => console.log(\"[A]input did change\"), [input])\n    // useEffect(() => console.log(\"[A]_input did change\"), [_input])\n\n    useEffect(() => {\n        /* respond to changes from the outside world */\n        if (input === _input)\n            return\n        if (typeof input === \"undefined\")\n            return\n\n        set_key(input.key)\n        set_value_type(input.type)\n        set_label(input.label)\n\n        switch (input.type) {\n            case \"boolean\":\n                set_bool(input.default)\n                break\n            case \"rgb\":\n                set_color(input.default)\n                break\n            case \"rgb[]\":\n                set_color_array(input.default)\n                break\n            case \"number[]\":\n            case \"rgbw\":\n            case \"rgbw[]\":\n            case \"button\":\n                break\n            case \"integer\":\n            case \"number\":\n                set_number(input.default.toString())\n                set_min(input.min.toString())\n                set_max(input.max.toString())\n                break\n            default:\n                const checker: never = input\n                console.log(checker)\n        }\n    }, [input, _input])\n\n    // useEffect(() => console.log(\"[B]type DID change\"), [type])\n    // useEffect(() => console.log(\"[B]key DID change\"), [key])\n    // useEffect(() => console.log(\"[B]label DID change\"), [label])\n    // useEffect(() => console.log(\"[B]bool DID change\"), [bool])\n    // useEffect(() => console.log(\"[B]color DID change\"), [color])\n    // useEffect(() => console.log(\"[B]color_array DID change\"), [color_array])\n    // useEffect(() => console.log(\"[B]number DID change\"), [number])\n    // useEffect(() => console.log(\"[B]min DID change\"), [min])\n    // useEffect(() => console.log(\"[B]max DID change\"), [max])\n    // useEffect(() => console.log(\"[B]button_label DID change\"), [button_label])\n    // useEffect(() => console.log(\"[B]onChange DID change\"), [onChange])\n\n    useEffect(() => {\n        /* send updates to the outside world */\n        let input: input | undefined;\n\n        switch (type) {\n            case \"rgbw\":\n                input = { type, key, label, default: rgbw }\n                break\n            case \"rgbw[]\":\n                input = { type, key, label, default: rgbw_array }\n                break\n            case \"number[]\":\n                input = { type, key, label, default: w_array }\n\n                break\n            case \"number\":\n            case \"integer\":\n                if (!number || !min || !max)\n                    break\n                input = { type, key, label, default: +number, min: +min, max: +max }\n                break\n\n            case \"boolean\":\n                if (typeof bool === \"undefined\")\n                    break\n                input = { type, key, label, default: bool }\n                break\n            case \"button\":\n                input = { type, key, label, default: button_label }\n                break\n            case \"rgb\":\n                input = { type, key, label, default: color }\n                break\n            case \"rgb[]\":\n                input = { type, key, label, default: color_array }\n                break\n            default:\n                const checker: never = type\n                console.log(checker)\n\n        }\n        if (typeof input !== \"undefined\") {\n            set_input(input)\n            cb.current.onChange(input)\n        }\n    }, [type, key, label, bool, color, color_array, number, min, max, button_label])\n\n    useEffect(() => {\n        /* validation for the key field */\n        if (typeof key === \"undefined\") {\n            set_key_error(undefined)\n            return\n        }\n        if (!key) {\n            set_key_error(\"empty\")\n            return\n        }\n        if (!is_js_identifier.test(key)) {\n            set_key_error(\"not a valid JS identifier\")\n            return\n        }\n        if (check(key, 6)) {\n            set_key_error(\"reserved word\")\n            return\n        }\n        set_key_error(undefined)\n    }, [key, set_key_error])\n\n    // useEffect(() => console.log(\"[C] key did change\"), [key])\n    // useEffect(() => console.log(\"[C] set_key_error did change\"), [set_key_error])\n\n    return <Row onClick={onActivate}>\n        <Dropdown\n            placeholder=\"Select...\"\n            label=\"Input Type\"\n            options={VALUE_ITEMS}\n            styles={{ dropdown: { width: 110 }, }}\n            selectedKey={type}\n            onChange={(event: React.FormEvent<HTMLDivElement>,\n                option?: IDropdownOption, index?: number) => {\n                option && set_value_type(option.key as value)\n            }}\n        />\n        <TextField\n            label=\"Input Label\"\n            value={label}\n            onChange={(event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string | undefined) => set_label(newValue || \"\")}\n            styles={descriptionTextBoxstyle} />\n        <TextField\n            label=\"Key\"\n            value={key}\n            onChange={(event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string | undefined) => set_key(newValue || \"\")}\n            styles={keyTextBoxstyle}\n            errorMessage={key_error} />\n\n        {type && type === \"rgb\" && (<div>\n            <Label>Default</Label>\n            <Color color={color} />\n        </div>)}\n        {type && type === \"rgb[]\" && <div>\n            <Label>Default</Label>\n            <ColorArray colors={color_array} />\n        </div>}\n        {type && type === \"boolean\" &&\n            <Toggle\n                label=\"Default\"\n                checked={bool}\n                onChange={(ev: React.MouseEvent<HTMLElement>, checked?: boolean) => {\n                    typeof checked !== \"undefined\" && set_bool(checked)\n                }} />\n        }\n        {type && type === \"button\" &&\n            <TextField\n                label=\"Button Label\"\n                value={button_label}\n                onChange={(event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string | undefined) => newValue && set_button_label(newValue)}\n                styles={keyTextBoxstyle}\n                errorMessage={key_error} />\n        }\n        {(type === \"integer\" || type === \"number\") && <>\n            <NumField\n                label=\"Default\"\n                value={number}\n                set_value={set_number}\n                type={type}\n                styles={numberTextBoxstyle} />\n            <NumField\n                label=\"Minimum\"\n                value={min}\n                max={typeof max === \"undefined\" ? max : +max}\n                set_value={set_min}\n                type={type}\n                styles={numberTextBoxstyle} />\n            <NumField\n                label=\"Maximum\"\n                value={max}\n                min={typeof min === \"undefined\" ? min : +min}\n                set_value={set_max}\n                type={type}\n                styles={numberTextBoxstyle} />\n        </>}\n        <div style={{ margin: \"auto\" }}></div>\n        < IconButton\n            buttonStyle={{ marginTop: \"2rem\" }}\n            title=\"Move Up\"\n            icon={faChevronUp}\n            onClick={cb.current.onUp} />\n        < IconButton\n            buttonStyle={{ marginTop: \"2rem\" }}\n            title=\"Move Down\"\n            icon={faChevronDown}\n            onClick={cb.current.onDown} />\n        < IconButton\n            buttonStyle={{ marginTop: \"2rem\" }}\n            title=\"Remove Input\"\n            icon={faTimes}\n            onClick={cb.current.onRemove} />\n    </Row>\n}\n\ninterface numProps {\n    label: string;\n    value: string | undefined;\n    set_value: (x: string) => void;\n    styles?: Partial<ITextFieldStyles>;\n    type: \"number\" | \"integer\";\n    min?: number;\n    max?: number;\n}\n\nconst NumField: React.FC<numProps> = ({ label, value, set_value, styles, type, min, max }) => {\n\n    const [error, set_error] = useState<string | undefined>()\n\n    const cb = useCallback((event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string | undefined) => {\n        typeof newValue !== \"undefined\" && set_value(newValue)\n    }, [set_value])\n\n    useEffect(() => {\n        if (typeof value === \"undefined\") {\n            set_error(undefined)\n            return\n        }\n        if (!value) {\n            set_error(\"empty\")\n            return\n        }\n        if (type === \"number\" && !is_number.test(value)) {\n            set_error(\"not a number\")\n            return\n        }\n        if (type === \"integer\" && !is_int.test(value)) {\n            set_error(\"not an integer\")\n            return\n        }\n        if (typeof min !== \"undefined\" && min > +value) {\n            set_error(`minimum: ${min}`)\n            return\n        }\n        if (typeof max !== \"undefined\" && max < +value) {\n            set_error(`maximum: ${max}`)\n            return\n        }\n        set_error(undefined)\n    }, [value, set_error, type, min, max])\n\n    return <TextField\n        label={label}\n        value={value}\n        onChange={cb}\n        styles={styles}\n        errorMessage={error} />\n\n}\n\nexport default InputPicker","import React, { useState, useEffect } from \"react\"\nimport { Dropdown, IDropdownStyles, IDropdownOption } from '@fluentui/react/lib/Dropdown';\nimport { value } from \"shared/types/parameters\"\n\nconst VALUE_TYPES: value[] = [\"boolean\", \"integer\", \"number\", \"number[]\", \"rgb\", \"rgb[]\", \"rgbw[]\"]\nconst VALUE_LABELS: { [key: string]: string } = {\n    \"button\": \"Button\",\n    \"boolean\": \"Boolean\",\n    \"integer\": \"Integer\",\n    \"number\": \"Number\",\n    \"number[]\": \"W Array\",\n    \"rgb\": \"Color\",\n    \"rgb[]\": \"Color Array\",\n    \"rgbw[]\": \"RGB+W Array\",\n}\nconst VALUE_ITEMS = VALUE_TYPES.map(t => ({ key: t, text: VALUE_LABELS[t] }))\n\nconst valueDropdownStyles: Partial<IDropdownStyles> = {\n    dropdown: { width: 110 },\n};\n\ninterface ValuePickerProps {\n    value?: value;\n    onChange: (value: value) => void;\n    placeholder?: string;\n    label?: string;\n}\nconst ValuePicker: React.FC<ValuePickerProps> = ({ value, onChange, placeholder, label }) => {\n    const [_value, _set_value] = useState<value | undefined>(value || \"rgb[]\")\n    useEffect(() => _set_value(value), [value])\n    useEffect(() => {\n        _value && onChange(_value)\n    }, [onChange, _value])\n\n    return <Dropdown\n        placeholder={placeholder || \"Select...\"}\n        label={label}\n        options={VALUE_ITEMS}\n        styles={valueDropdownStyles}\n        selectedKey={_value}\n        onChange={(event: React.FormEvent<HTMLDivElement>,\n            option?: IDropdownOption) => {\n            option && _set_value(option.key as value)\n        }}\n    />\n\n}\n\nexport default ValuePicker","import React, { useState, useMemo, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport templateBuilder from \"./template\"\nimport InputPicker from \"./input\"\nimport { value, input, color_array_input, color_input } from 'shared/types/parameters';\nimport { TextField, ITextFieldStyles } from '@fluentui/react/lib/TextField';\nimport { DefaultButton } from '@fluentui/react/lib/Button';\nimport { rgb } from 'shared/types/mode';\n// import { Dropdown } from '@fluentui/react/lib/Dropdown';\nimport ValuePicker from \"./valuePicker\"\n\nimport copy from 'copy-to-clipboard';\n\nimport CodeMirror from 'rodemirror'\nimport { Extension } from '@codemirror/state'\nimport { basicSetup } from '@codemirror/basic-setup'\nimport { oneDark } from '@codemirror/theme-one-dark'\nimport { javascript } from '@codemirror/lang-javascript'\nimport { ColorArrayPicker, ColorValuePicker } from \"../editor/inputs/color-input\"\n\nconst nameTextBoxstyle: Partial<ITextFieldStyles> = { fieldGroup: { width: \"15rem\" } };\n\nconst Row = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: end;\n    gap: 10px;\n`\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: row;\n    height: 100%;\n`\n\nconst OptionsPanel = styled.div`\n    min-width: 20rem;\n    max-width: 20rem;\n    padding: .8rem;\n`\n\n\nconst Editor: React.FC<{ code: string }> = ({ code }) => {\n    const extensions = useMemo<Extension[]>(\n        () => [basicSetup, oneDark, javascript({ typescript: true })],\n        []\n    )\n\n    const [value, setValue] = useState(code)\n\n    return (\n        <div style={{ maxWidth: 1000 }}>\n            <CodeMirror\n                value={code}\n                onUpdate={(v) => {\n                    if (v.docChanged) {\n                        setValue(v.state.doc.toString())\n                    }\n                }}\n                extensions={extensions}\n            />\n        </div>\n    )\n}\n\nlet input_number = 0\nconst default_input = (): color_input => ({\n    type: \"rgb\",\n    default: [0, 0, 255],\n    label: `My Color ${input_number}`,\n    key: `input_${input_number++}`\n})\n\nfunction validateInputs(x: input[]): string[] {\n    const out: string[] = []\n    const keys = new Set<string>()\n    const labels = new Set<string>()\n    for (let input of x) {\n        if (keys.has(input.key)) {\n            out.push(`keys must be unique but \"${input.key}\" appears more than once`)\n        }\n        if (labels.has(input.label)) {\n            out.push(`labels must be unique but \"${input.label}\" appears more than once`)\n        }\n        labels.add(input.label)\n        keys.add(input.key)\n    }\n\n    return out\n}\n\nconst Template: React.FC = () => {\n\n    const [name, setName] = useState<string>(\"My Awesome Effect\")\n    const [code, setCode] = useState<string>(\"\")\n    const [inputs, setInputs] = useState<(input)[]>([])\n    const [output, setOutput] = useState<value>(\"rgb[]\")\n    const [activeInput, setActiveInput] = useState<number>(0)\n    const [errors, set_errors] = useState<string[]>([])\n\n\n    const updateInput = (input: input, i: number) => {\n        let inp = [...inputs]\n        inp[i] = input\n        setInputs(inp)\n    }\n\n    const dropInput = (i: number) => {\n        setInputs([...inputs.slice(0, i), ...inputs.slice(i + 1)])\n    }\n    const moveUp = (i: number) => {\n        if (i === 0)\n            return\n        const tmp = Array.from(inputs)\n        tmp.splice(i, 1)\n        tmp.splice(i - 1, 0, inputs[i])\n        setInputs(tmp)\n    }\n    const moveDown = (i: number) => {\n        if (i === inputs.length - 1)\n            return\n        const tmp = Array.from(inputs)\n        tmp.splice(i, 1)\n        tmp.splice(i + 1, 0, inputs[i])\n        setInputs(tmp)\n    }\n\n    useEffect(() => {\n        /* quality checks */\n\n        if (!name)\n            return setCode(\"// Your effect needs a name\")\n        if (!output)\n            return setCode(\"// Please pick an output type\")\n        if (!inputs.every(input => typeof input !== \"undefined\"))\n            return setCode(\"// One of the Inputs needs attention\")\n\n        try {\n            const code = templateBuilder({\n                effectName: name,\n                inputs: inputs as input[],\n                output_type: output,\n            })\n            setCode(code)\n        } catch (err) {\n            setCode(`Something went wrong: ${(err as any).message}`)\n\n        }\n\n        set_errors(validateInputs(inputs))\n\n    }, [inputs, name, output])\n\n    return (\n        <div style={{\n            width: \"100%\", maxWidth: 1200, margin: \"auto\"\n        }}>\n            <Container>\n                <div style={{ margin: 15, flexGrow: 1 }}>\n\n                    <Row>\n                        <ValuePicker\n                            label=\"Output Type\"\n                            onChange={setOutput} />\n                        <TextField\n                            label=\"Name\"\n                            value={name}\n                            onChange={(event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string | undefined) => newValue && setName(newValue)}\n                            styles={nameTextBoxstyle} />\n                    </Row>\n\n                    <Row\n                        style={{\n                            justifyContent: \"space-between\",\n                            margin: \"1.5rem 8px .7rem\"\n                        }}>\n                        <h2>Inputs</h2>\n                        <DefaultButton style={{ alignSelf: 'flex-start' }}\n                            onClick={() => setInputs([...inputs, default_input()])}\n                        >Add Input</DefaultButton>\n                    </Row>\n\n                    {inputs.map((input, i) => (\n                        <div key={i} style={{\n                            // padding: \"5px\",\n                            backgroundColor: (i % 2 === 1) ? \"none\" : \"#dddddd\",\n                            border: \"1px black\",\n                        }}>\n                            {/* <p>{JSON.stringify(input)}</p> */}\n                            <InputPicker\n                                input={input}\n                                onChange={(inp: input) => updateInput(inp, i)}\n                                onRemove={() => dropInput(i)}\n                                onActivate={() => setActiveInput(i)}\n                                onUp={() => moveUp(i)}\n                                onDown={() => moveDown(i)}\n                            />\n                        </div>\n                    ))}\n\n                    {errors.length > 0 && (\n                        <>\n                            <h3 style={{ color: \"red\" }}>Errors:</h3>\n                            <ul>\n                                {errors.map((e, i) => (<li key={i} style={{ color: \"red\" }}>{e}</li>))}\n                            </ul>\n                        </>\n                    )}\n\n                    <Row\n                        style={{\n                            justifyContent: \"space-between\",\n                            margin: \"1.5rem 8px .7rem\"\n                        }}>\n                        <h3 >Code Template</h3>\n                        <DefaultButton onClick={() => copy(code)}>Copy to Clipboard</DefaultButton>\n                    </Row>\n                    <Editor code={code} />\n                </div>\n                <OptionsPanel>\n                    {inputs[activeInput]?.type === \"rgb\" &&\n                        <ColorValuePicker\n                            color={inputs[activeInput]?.default as rgb}\n                            onChange={(color: rgb) => {\n                                updateInput({ ...(inputs[activeInput] as color_input), default: color }, activeInput)\n                            }}\n                        />}\n                    {inputs[activeInput]?.type === \"rgb[]\" &&\n                        <ColorArrayPicker\n                            colors={inputs[activeInput]?.default as rgb[]}\n                            onChange={(colors: rgb[]) => {\n                                updateInput({ ...(inputs[activeInput] as color_array_input), default: colors }, activeInput)\n                            }}\n                        />}\n                </OptionsPanel>\n            </Container>\n        </div >)\n}\n\nexport default Template"],"names":["output_type","args","interfaces","inputs","length","map","i","key","type","reduce","a","b","_input","out","label","JSON","stringify","default","min","max","imports","strings","values","str","forEach","string","bldr","builder","effectName","VALUE_LABELS","VALUE_ITEMS","Object","keys","t","text","descriptionTextBoxstyle","fieldGroup","width","keyTextBoxstyle","numberTextBoxstyle","Row","styled","is_js_identifier","NumField","value","set_value","styles","useState","error","set_error","cb","useCallback","event","newValue","useEffect","is_number","is_int","undefined","TextField","onChange","errorMessage","input","onRemove","onActivate","onUp","onDown","set_input","set_value_type","set_key","key_error","set_key_error","set_label","bool","set_bool","color","set_color","color_array","set_color_array","button_label","set_button_label","number","set_number","set_min","set_max","rgbw","rgbw_array","w_array","useRef","current","toString","checker","console","log","test","check","onClick","Dropdown","placeholder","options","dropdown","selectedKey","option","index","Label","colors","Toggle","checked","ev","style","margin","buttonStyle","marginTop","title","icon","faChevronUp","faChevronDown","faTimes","valueDropdownStyles","_value","_set_value","nameTextBoxstyle","Container","OptionsPanel","Editor","code","extensions","useMemo","basicSetup","oneDark","javascript","typescript","setValue","maxWidth","onUpdate","v","docChanged","state","doc","input_number","name","setName","setCode","setInputs","output","setOutput","activeInput","setActiveInput","errors","set_errors","updateInput","inp","every","templateBuilder","err","message","x","Set","labels","has","push","add","validateInputs","flexGrow","justifyContent","DefaultButton","alignSelf","backgroundColor","border","slice","dropInput","tmp","Array","from","splice","moveUp","moveDown","e","copy"],"sourceRoot":""}